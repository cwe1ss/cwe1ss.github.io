<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>.NET - Category - Christian Weiss</title><link>https://www.chwe.at/categories/.net/</link><description>.NET - Category - Christian Weiss</description><generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>christian@chwe.at (Christian Weiss)</managingEditor><webMaster>christian@chwe.at (Christian Weiss)</webMaster><lastBuildDate>Thu, 22 Oct 2020 00:00:00 +0100</lastBuildDate><atom:link href="https://www.chwe.at/categories/.net/" rel="self" type="application/rss+xml"/><item><title>Simple zero-downtime updates with ASP.NET Core and health checks</title><link>https://www.chwe.at/2020/10/zero-downtime-updates-with-aspnet-core/</link><pubDate>Thu, 22 Oct 2020 00:00:00 +0100</pubDate><author>Author</author><guid>https://www.chwe.at/2020/10/zero-downtime-updates-with-aspnet-core/</guid><description><![CDATA[<p>Do you use a load balancer that isn&rsquo;t tightly integrated with your orchestrator and therefore doesn&rsquo;t know upfront when the orchestrator has to stop an instance of your ASP.NET Core application for an upgrade / a scaling action / a restart?</p>
<p>Does this result in a few failing requests until the load balancer has finally figured out that the instance is gone?</p>
<p>If so, this blog post might be for you!</p>
<h2 id="problem-details">Problem details</h2>
<p>We are hosting our ASP.NET Core applications in Azure Service Fabric and public traffic is routed into the cluster via Azure Application Gateway.</p>
<p>Application Gateway doesn&rsquo;t have a direct integration with Service Fabric&rsquo;s naming resolution, so it can&rsquo;t automatically forward traffic to the dynamic ports &amp; nodes of a service in the cluster. Instead, we need to use fixed ports for our ASP.NET Core applications in Service Fabric and we use simple port based routing rules in Application Gateway.</p>
<p>Example: A stateless ASP.NET Core application <code>fabric:/MyBlog/MyBlogWebsite</code> is running in our Service Fabric cluster with a fixed port of <code>5000</code> and with <code>InstanceCount=-1</code> (so it runs on each node). To expose this application, Application Gateway is configured to forward all requests targeting <code>www.chwe.at</code> to the fixed <code>5000</code>-port on each node in the Service Fabric VMSS (virtual machine scale set).</p>
<p>This works great. However, during application updates, Service Fabric will stop the existing process before it starts the new application version. This is required because the port <code>5000</code> has to be released before it can be bound again to the new version. Application Gateway isn&rsquo;t aware of this short termination, so any requests it forwards to the node during that time will fail.</p>
<h2 id="health-checks-to-the-rescue">Health checks to the rescue</h2>
<p>Azure Application Gateway (and probably any other load balancer) supports <a href="https://docs.microsoft.com/en-us/azure/application-gateway/application-gateway-probe-overview" target="_blank" rel="noopener noreffer">health probes</a> to decide if it should forward a request to a given node. In the simplest case, it will just periodically do a HTTP request to the root of your application and if it doesn&rsquo;t receive a response or if the response returns a server error, it will take the instance out of rotation after a few failed attempts.</p>
<p>So if one of your application instances gets shut down, the load balancer will stop forwarding traffic to it <strong>after some time</strong>.</p>
<p><em>However, this still means that there will be failed requests until that has happened.</em></p>
<p>How can we improve this?</p>
<p><em>Should we change our deployment process and call an API of our load balancer to actively take the instance out of rotation before we do the update and call another API of the load balancer to take it back in once the new instance is running?</em> This would definitely work, but unfortunately Azure Application Gateway doesn&rsquo;t have such an API. We would also have to integrate this into every other orchestration action that results in instance shutdowns (scale down, move to another node, &hellip;).</p>
<p><em>Wouldn&rsquo;t it be nice if we could just <strong>delay the shutdown</strong> of our instance and keep serving requests until the load balancer has figured out that it should take the instance out of rotation?</em></p>
<p>We can do this in ASP.NET Core by combining the following ideas:</p>
<ul>
<li>We need to expose the health status of the application on it&rsquo;s own URL - e.g. <code>/health</code></li>
<li>With this separate URL, we can switch the health to <code>Unhealthy</code>, once the application receives a shutdown signal from the orchestrator (e.g. <code>CTRL+C</code>).</li>
<li>We can now delay the shutdown until the load balancer health-timeout has been reached.</li>
<li>Until then, we&rsquo;ll just continue to serve any incoming requests.</li>
</ul>
<p><em>You can find the finished code for this post here: <a href="https://github.com/cwe1ss/blog-zero-downtime-with-health-checks" target="_blank" rel="noopener noreffer">https://github.com/cwe1ss/blog-zero-downtime-with-health-checks</a>. If you want to follow along step by step, look at the separate commits. They area also linked in each step below.</em></p>
<h2 id="set-up-the-health-endpoint-in-aspnet-core">Set up the <code>/health</code>-endpoint in ASP.NET Core</h2>
<p>ASP.NET Core has <a href="https://docs.microsoft.com/en-us/aspnet/core/host-and-deploy/health-checks?view=aspnetcore-3.1" target="_blank" rel="noopener noreffer">a built-in feature for health checks</a>.</p>
<p>To enable it, we need to register the feature with the DI container by calling <code>services.AddHealhChecks()</code> in <code>Startup.ConfigureServices()</code> and we need to enable the endpoint on the request pipeline by calling <code>endpoints.MapHealthChecks(&quot;/health&quot;);</code> in the <code>app.UseEndpoints(...)</code>-block of <code>Startup.Configure()</code>.</p>
<p>After this, we can run the app and navigate to <code>http://localhost:5000/health</code>. This will return the text &ldquo;Healthy&rdquo; and the status code 200.</p>
<p><a href="https://github.com/cwe1ss/blog-zero-downtime-with-health-checks/commit/0014c70e68ac97e735572be12174d0f9ab3ff7c8" target="_blank" rel="noopener noreffer">See all changes from this step in the Git commit.</a></p>
<h2 id="add-a-health-check-that-switches-to-unhealthy-once-the-application-shuts-down">Add a health check that switches to Unhealthy, once the application shuts down</h2>
<p>We can <a href="https://docs.microsoft.com/en-us/aspnet/core/host-and-deploy/health-checks?view=aspnetcore-3.1#create-health-checks" target="_blank" rel="noopener noreffer">add our own health checks</a> to the ASP.NET Core health system by implementing the interface <code>Microsoft.Extensions.Diagnostics.HealthChecks.IHealthCheck</code>.</p>
<p>To get notified when the application is being shut down, we can use <code>Microsoft.Extensions.Hosting.IHostApplicationLifetime</code>. This interface provides a <code>ApplicationStopping</code>-hook that is triggered when the shutdown signal is received but before the application stops processing requests!</p>
<p>When combined, we get the following first simple version of our <code>ShuttingDownHealthCheck</code>:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-csharp" data-lang="csharp"><span class="line"><span class="cl"><span class="k">public</span> <span class="k">class</span> <span class="nc">ShuttingDownHealthCheck</span> <span class="p">:</span> <span class="n">IHealthCheck</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">private</span> <span class="n">HealthStatus</span> <span class="m">_</span><span class="n">status</span> <span class="p">=</span> <span class="n">HealthStatus</span><span class="p">.</span><span class="n">Healthy</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">public</span> <span class="n">ShuttingDownHealthCheck</span><span class="p">(</span><span class="n">IHostApplicationLifetime</span> <span class="n">appLifetime</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">appLifetime</span><span class="p">.</span><span class="n">ApplicationStopping</span><span class="p">.</span><span class="n">Register</span><span class="p">(()</span> <span class="p">=&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&#34;Shutting down&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">            <span class="m">_</span><span class="n">status</span> <span class="p">=</span> <span class="n">HealthStatus</span><span class="p">.</span><span class="n">Unhealthy</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">});</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">public</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">HealthCheckResult</span><span class="p">&gt;</span> <span class="n">CheckHealthAsync</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="n">HealthCheckContext</span> <span class="n">context</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">CancellationToken</span> <span class="n">cancellationToken</span> <span class="p">=</span> <span class="k">default</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="kt">var</span> <span class="n">result</span> <span class="p">=</span> <span class="k">new</span> <span class="n">HealthCheckResult</span><span class="p">(</span><span class="m">_</span><span class="n">status</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">Task</span><span class="p">.</span><span class="n">FromResult</span><span class="p">(</span><span class="n">result</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Our class also needs to be registered with the DI container by calling <code>.AddCheck&lt;ShuttingDownHealthCheck&gt;(&quot;shutting_down&quot;)</code> on the return object of <code>services.AddHealthChecks()</code>.</p>
<p>However, it&rsquo;s important to know that <strong>by default, ASP.NET Core initializes the class for every request</strong> to the health endpoint. This doesn&rsquo;t work for our scenario as we need the global <code>_status</code> variable and just a single <code>ApplicationStopping</code>-registration.</p>
<p>To ensure the class is created only once, we have to add it as a singleton to the DI framework via <code>services.AddSingleton&lt;ShuttingDownHealthCheck&gt;();</code>.</p>
<p>It&rsquo;s also important to know, that our <code>ShuttingDownHealthCheck</code>-class will only be initialized, when it is requested for the first time. So if we just run the app, navigate to http://localhost:5000 and press <code>CTRL+C</code>, our &ldquo;Shutting down&rdquo; message will NOT appear in the console.</p>
<p>If we navigate to http://localhost:5000/health and press <code>CTRL+C</code> afterwards, the &ldquo;Shutting down&rdquo; message will appear on the console!</p>
<p>This behavior is fine for our scenario as the load balancer will continuously invoke this endpoint anyway!</p>
<p><a href="https://github.com/cwe1ss/blog-zero-downtime-with-health-checks/commit/bafd315f72a4555074db2bb4a4e5f15c8c1f0a9b" target="_blank" rel="noopener noreffer">See all changes from this step in the Git commit.</a></p>
<h2 id="delay-the-shutdown">Delay the shutdown</h2>
<p>If you&rsquo;ve followed the steps so far, you will have noticed that the application still shuts down immediately after &ldquo;Shutting down&rdquo; has been printed to the console.</p>
<p>To delay the shutdown, we can simply add a <code>Thread.Sleep()</code> to the code in our <code>ApplicationStopping</code>-handler. With this, the main thread is blocked but regular requests will still be processed on other threads.</p>
<p>Let&rsquo;s add <code>Thread.Sleep(TimeSpan.FromSeconds(15));</code> after our <code>_status = HealthStatus.Unhealthy;</code> statement and run the app again.</p>
<p>If we now navigate to http://localhost:5000/health and press <code>CTRL+C</code> afterwards, our &ldquo;Shutting down&rdquo; message will appear on the console and the application will keep running!</p>
<p>Any request to the <code>/health</code>-endpoint during that time will now return &ldquo;Unhealthy&rdquo; with a status code 503 (Service unavailable).</p>
<p>When deployed, the load balancer will now receive this <code>Unhealthy</code> response and take the instance out of rotation after a few attempts. Until then, any regular requests it sends to the instance will still be processed!</p>
<h2 id="improve-the-health-check">Improve the health check</h2>
<p>There&rsquo;s still a few issues with our custom health check:</p>
<ul>
<li>ASP.NET Core has a default shutdown timeout of 5 seconds. After this, it will throw an <code>OperationCanceledException</code> and therefore not gracefully shutdown other background services etc.</li>
<li>The shutdown delay is annoying during development as we now can&rsquo;t quickly close the app.</li>
<li>Our &ldquo;Shutting down&rdquo; message is just printed to the console. It would be nice if it were sent to the regular logging system.</li>
</ul>
<p>To increase the <a href="https://docs.microsoft.com/en-us/aspnet/core/fundamentals/host/generic-host?view=aspnetcore-3.1#shutdowntimeout-1" target="_blank" rel="noopener noreffer">ASP.NET Core ShutdownTimeout</a>, we need to configure the <code>HostOptions</code> class in <code>Startup.ConfigureServices()</code>:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-csharp" data-lang="csharp"><span class="line"><span class="cl"><span class="n">services</span><span class="p">.</span><span class="n">Configure</span><span class="p">&lt;</span><span class="n">HostOptions</span><span class="p">&gt;(</span><span class="n">option</span> <span class="p">=&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">option</span><span class="p">.</span><span class="n">ShutdownTimeout</span> <span class="p">=</span> <span class="n">System</span><span class="p">.</span><span class="n">TimeSpan</span><span class="p">.</span><span class="n">FromSeconds</span><span class="p">(</span><span class="m">30</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">});</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>To improve our health check, we&rsquo;ll introduce <code>IHostEnvironment</code> to detect if we&rsquo;re running in <code>Production</code>-mode and an <code>ILogger</code>. Our <code>ApplicationStopping</code>-registration will now look like this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-csharp" data-lang="csharp"><span class="line"><span class="cl"><span class="n">appLifetime</span><span class="p">.</span><span class="n">ApplicationStopping</span><span class="p">.</span><span class="n">Register</span><span class="p">(()</span> <span class="p">=&gt;</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="m">_</span><span class="n">status</span> <span class="p">=</span> <span class="n">HealthStatus</span><span class="p">.</span><span class="n">Unhealthy</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kt">bool</span> <span class="n">delayShutdown</span> <span class="p">=</span> <span class="m">_</span><span class="n">hostEnvironment</span><span class="p">.</span><span class="n">IsProduction</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">delayShutdown</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="kt">var</span> <span class="n">shutdownDelay</span> <span class="p">=</span> <span class="n">TimeSpan</span><span class="p">.</span><span class="n">FromSeconds</span><span class="p">(</span><span class="m">25</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="m">_l</span><span class="n">ogger</span><span class="p">.</span><span class="n">LogInformation</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">            <span class="s">&#34;Delaying shutdown for {Seconds} seconds&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="n">shutdownDelay</span><span class="p">.</span><span class="n">TotalSeconds</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1">// ASP.NET Core requests are processed on separate threads,</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// so we can just put the main thread on sleep.</span>
</span></span><span class="line"><span class="cl">        <span class="n">Thread</span><span class="p">.</span><span class="n">Sleep</span><span class="p">(</span><span class="n">shutdownDelay</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="m">_l</span><span class="n">ogger</span><span class="p">.</span><span class="n">LogInformation</span><span class="p">(</span><span class="s">&#34;Shutdown delay completed&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">});</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Of course, it would also be possible to just skip the registration ouf our health check in the <code>Startup.ConfigureServices()</code>-method.</p>
<p>The logic in our ASP.NET Core application is now finished!</p>
<p><a href="https://github.com/cwe1ss/blog-zero-downtime-with-health-checks/commit/bb5dcecc68d20d5179b8d36fa22f468162e928b8" target="_blank" rel="noopener noreffer">See all changes from this step in the Git commit.</a></p>
<h2 id="set-the-load-balancer-settings">Set the load balancer settings</h2>
<p>It&rsquo;s important to understand that we&rsquo;ve set a 25 second shutdown delay. This means, the load balancer must take the instance out of rotation before that time. If it fails to do so, there will be failed requests again.</p>
<p>We therefore need to set up our load balancing probes e.g. in the following way:</p>
<ul>
<li><strong>Target URL: /health</strong>
<ul>
<li><em>Our custom health endpoint</em></li>
</ul>
</li>
<li><strong>Interval: 5 seconds</strong>
<ul>
<li><em>Run the probe every 5 seconds</em></li>
</ul>
</li>
<li><strong>Timeout: 4 seconds</strong>
<ul>
<li><em>If the service doesn&rsquo;t respond, fail after 4 seconds</em></li>
</ul>
</li>
<li><strong>Attempts: 3</strong>
<ul>
<li><em>Take the service out of rotation after 3 failed attempts</em></li>
</ul>
</li>
</ul>
<p>With these settings, the load balancer will take the service out of rotation after 15-20 seconds!</p>
<p>Of course, you can change these settings to whatever fits your scenario best.</p>
<h2 id="summary">Summary</h2>
<p>This post is quite long as it tries to explain everything step by step, but in general, the idea is very simple:</p>
<ul>
<li>We use a custom health check to mark the instance as Unhealthy once the shutdown has been requested</li>
<li>We delay the shutdown for 25 seconds. Any regular requests will still be processed during that time.</li>
<li>We make sure the load balancer takes the instance out of rotation before these 25 seconds are over.</li>
</ul>
<p>You can find the code for this blog here: <a href="https://github.com/cwe1ss/blog-zero-downtime-with-health-checks" target="_blank" rel="noopener noreffer">https://github.com/cwe1ss/blog-zero-downtime-with-health-checks</a>.</p>
<p>Follow the commits to see the separate steps we&rsquo;ve taken.</p>]]></description></item><item><title>Find missing projects with PowerShell</title><link>https://www.chwe.at/2015/09/find-missing-projects-with-powershell/</link><pubDate>Wed, 30 Sep 2015 00:00:00 +0100</pubDate><author>Author</author><guid>https://www.chwe.at/2015/09/find-missing-projects-with-powershell/</guid><description><![CDATA[<p>In my last post, I showed you a C# script for finding projects which are not part of a SLN-file.
Since having to compile it is a bit of an overhead, I decided to migrate this code to a powershell script,
which you can find here:</p>
<p><a href="https://gist.github.com/cwe1ss/c1d623a24a8b7841b785" target="_blank" rel="noopener noreffer">ProjectsMissingInSolution.ps1</a></p>
]]></description></item><item><title>Find projects which are missing in your "All Projects" solution</title><link>https://www.chwe.at/2014/08/find-projects-missing-in-visual-studio-solution/</link><pubDate>Thu, 21 Aug 2014 00:00:00 +0100</pubDate><author>Author</author><guid>https://www.chwe.at/2014/08/find-projects-missing-in-visual-studio-solution/</guid><description><![CDATA[<p>Do you use a Visual Studio solution which contains all of your projects to do daily builds? If you have lots of projects and if many people are involved it&rsquo;s very likely that somebody forgets to add his project to this solution.</p>
<p>This small program helps you by showing you all csproj-files that are not part of your solution file!</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c#" data-lang="c#"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Program</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">static</span> <span class="k">void</span> <span class="n">Main</span><span class="p">(</span><span class="kt">string</span><span class="p">[]</span> <span class="n">args</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// Parameters</span>
</span></span><span class="line"><span class="cl">        <span class="kt">string</span> <span class="n">baseFolder</span> <span class="p">=</span> <span class="s">@&#34;C:\path\to\solution\&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="kt">string</span> <span class="n">slnFile</span> <span class="p">=</span> <span class="s">&#34;AllProjects.sln&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="kt">string</span> <span class="n">outputFile</span> <span class="p">=</span> <span class="s">&#34;MissingProjects.txt&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="kt">string</span> <span class="n">slnContent</span> <span class="p">=</span> <span class="n">File</span><span class="p">.</span><span class="n">ReadAllText</span><span class="p">(</span><span class="n">Path</span><span class="p">.</span><span class="n">Combine</span><span class="p">(</span><span class="n">baseFolder</span><span class="p">,</span> <span class="n">slnFile</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="kt">string</span><span class="p">[]</span> <span class="n">projectFiles</span> <span class="p">=</span> <span class="n">Directory</span><span class="p">.</span><span class="n">GetFiles</span><span class="p">(</span><span class="n">baseFolder</span><span class="p">,</span> <span class="s">&#34;*.csproj&#34;</span><span class="p">,</span> <span class="n">SearchOption</span><span class="p">.</span><span class="n">AllDirectories</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">List</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="n">missingProjects</span> <span class="p">=</span> <span class="n">projectFiles</span>
</span></span><span class="line"><span class="cl">            <span class="p">.</span><span class="n">Where</span><span class="p">(</span><span class="n">fullPath</span> <span class="p">=&gt;</span> <span class="n">slnContent</span><span class="p">.</span><span class="n">IndexOf</span><span class="p">(</span><span class="n">fullPath</span><span class="p">.</span><span class="n">Replace</span><span class="p">(</span><span class="n">baseFolder</span><span class="p">,</span> <span class="s">&#34;&#34;</span><span class="p">),</span> <span class="n">StringComparison</span><span class="p">.</span><span class="n">OrdinalIgnoreCase</span><span class="p">)</span> <span class="p">&lt;</span> <span class="m">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="p">.</span><span class="n">ToList</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">File</span><span class="p">.</span><span class="n">WriteAllLines</span><span class="p">(</span><span class="n">outputFile</span><span class="p">,</span> <span class="n">missingProjects</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&#34;Projects missing in solution: &#34;</span> <span class="p">+</span> <span class="n">missingProjects</span><span class="p">.</span><span class="n">Count</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&#34;Details: &#34;</span> <span class="p">+</span> <span class="n">outputFile</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">Console</span><span class="p">.</span><span class="n">ReadLine</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div>]]></description></item><item><title>Feature Folders: Controllers and Views</title><link>https://www.chwe.at/2014/07/feature-folders-controllers-and-views/</link><pubDate>Wed, 02 Jul 2014 00:00:00 +0100</pubDate><author>Author</author><guid>https://www.chwe.at/2014/07/feature-folders-controllers-and-views/</guid><description><![CDATA[<p>The first step in our process to <a href="https://www.chwe.at/2014/04/introducing-the-asp.net-mvc-feature-folders-project-structure/" rel="">a better folder structure for our MVC projects</a> is to make sure, MVC can resolve our Controllers and Views. This is our target structure:</p>
<ul>
<li>(Project Root)
<ul>
<li>Areas
<ul>
<li>(AreaName)
<ul>
<li>(FeatureName)
<ul>
<li>(FeatureName)Controller.cs</li>
<li>Index.cshtml</li>
<li>Edit.cshtml</li>
</ul>
</li>
<li>&hellip; (other features)</li>
<li>Shared
<ul>
<li>&hellip; (area specific shared views like EditorTemplates, Layout-pages, &hellip;)</li>
</ul>
</li>
</ul>
</li>
<li>&hellip; (other areas)</li>
<li>Shared
<ul>
<li>&hellip; (area independent shared views like EditorTemplates, Layout-pages, &hellip;)</li>
</ul>
</li>
</ul>
</li>
<li>Features
<ul>
<li>(Feature2Name)
<ul>
<li>(Feature2Name)Controller.cs</li>
<li>Index.cshtml</li>
<li>Edit.cshtml</li>
</ul>
</li>
<li>&hellip; (other features)</li>
<li>Shared
<ul>
<li>&hellip; (feature independent shared views like EditorTemplates, Layout-pages, &hellip;)</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>Of course, if you don&rsquo;t want to use &ldquo;areas&rdquo; you only need the &ldquo;Features&rdquo; folder in your project. This also means, that if you move to this new structure, you can completely remove the old &ldquo;Controllers&rdquo; and &ldquo;Views&rdquo; folders.</p>
<h3 id="controllers">Controllers</h3>
<p>To support this structure for Controllers, you don&rsquo;t have to change anything in MVC since it does not force you to place them in a special folder! You can put Controllers into whatever folder you want. Resolving them is purely depended on your RouteConfig.</p>
<h3 id="views">Views</h3>
<p>To support this structure for Views, you have to create a custom ViewEngine. As you can see in the following example, this can also be done very easily. Please note, that this code only supports *.cshtml-files. If you want to use *.vbhtml-files as well, you just have to duplicate the paths and change the extension to *.vbhtml.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c#" data-lang="c#"><span class="line"><span class="cl"><span class="k">public</span> <span class="k">class</span> <span class="nc">FeatureFolderViewEngine</span> <span class="p">:</span> <span class="n">RazorViewEngine</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">public</span> <span class="n">FeatureFolderViewEngine</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// {0} ActionName</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// {1} ControllerName</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// {2} AreaName</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">AreaViewLocationFormats</span> <span class="p">=</span> <span class="k">new</span><span class="p">[]</span>
</span></span><span class="line"><span class="cl">                                <span class="p">{</span>
</span></span><span class="line"><span class="cl">                                    <span class="s">&#34;~/Areas/{2}/{1}/{0}.cshtml&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                    <span class="s">&#34;~/Areas/{2}/Shared/{0}.cshtml&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                    <span class="s">&#34;~/Areas/Shared/{0}.cshtml&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                <span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">AreaMasterLocationFormats</span> <span class="p">=</span> <span class="k">new</span><span class="p">[]</span>
</span></span><span class="line"><span class="cl">                                    <span class="p">{</span>
</span></span><span class="line"><span class="cl">                                        <span class="s">&#34;~/Areas/{2}/{1}/{0}.cshtml&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                        <span class="s">&#34;~/Areas/{2}/Shared/{0}.cshtml&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                        <span class="s">&#34;~/Areas/Shared/{0}.cshtml&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                    <span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">AreaPartialViewLocationFormats</span> <span class="p">=</span> <span class="k">new</span><span class="p">[]</span>
</span></span><span class="line"><span class="cl">                                        <span class="p">{</span>
</span></span><span class="line"><span class="cl">                                            <span class="s">&#34;~/Areas/{2}/{1}/{0}.cshtml&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                            <span class="s">&#34;~/Areas/{2}/Shared/{0}.cshtml&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                            <span class="s">&#34;~/Areas/Shared/{0}.cshtml&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                        <span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">ViewLocationFormats</span> <span class="p">=</span> <span class="k">new</span><span class="p">[]</span>
</span></span><span class="line"><span class="cl">                            <span class="p">{</span>
</span></span><span class="line"><span class="cl">                                <span class="s">&#34;~/Features/{1}/{0}.cshtml&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                <span class="s">&#34;~/Features/Shared/{0}.cshtml&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                            <span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">MasterLocationFormats</span> <span class="p">=</span> <span class="k">new</span><span class="p">[]</span>
</span></span><span class="line"><span class="cl">                                <span class="p">{</span>
</span></span><span class="line"><span class="cl">                                    <span class="s">&#34;~/Features/{1}/{0}.cshtml&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                    <span class="s">&#34;~/Features/Shared/{0}.cshtml&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                <span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">PartialViewLocationFormats</span> <span class="p">=</span> <span class="k">new</span><span class="p">[]</span>
</span></span><span class="line"><span class="cl">                                    <span class="p">{</span>
</span></span><span class="line"><span class="cl">                                        <span class="s">&#34;~/Features/{1}/{0}.cshtml&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                        <span class="s">&#34;~/Features/Shared/{0}.cshtml&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                                    <span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">FileExtensions</span> <span class="p">=</span> <span class="k">new</span><span class="p">[]</span>
</span></span><span class="line"><span class="cl">                        <span class="p">{</span>
</span></span><span class="line"><span class="cl">                            <span class="s">&#34;cshtml&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                        <span class="p">};</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Of course, if you use this new structure, you lose some of the built-in templating- and navigation-support in Visual Studio since VS does not recognize these folders as &ldquo;Views&rdquo;-folders. Therefore, the following things no longer work:</p>
<ul>
<li>&ldquo;Go To View&rdquo; throws an error.</li>
<li>&ldquo;Add View&rdquo; adds the view to the old &ldquo;Views&rdquo;-folder.</li>
</ul>
<p>Fortunately, ReSharper helps you with these issues since it contains built-in templates for views and also <a href="http://blog.jetbrains.com/dotnet/2013/01/29/resharper-and-custom-aspnet-mvc-view-location/" target="_blank" rel="noopener noreffer">supports our custom ViewEngine</a>!</p>]]></description></item><item><title>Introducing the ASP.NET MVC “Feature Folders” Project Structure</title><link>https://www.chwe.at/2014/04/introducing-the-asp.net-mvc-feature-folders-project-structure/</link><pubDate>Mon, 07 Apr 2014 00:00:00 +0100</pubDate><author>Author</author><guid>https://www.chwe.at/2014/04/introducing-the-asp.net-mvc-feature-folders-project-structure/</guid><description><![CDATA[<h3 id="whats-the-problem-with-the-default-aspnet-mvc-folder-structure">What’s the problem with the default ASP.NET MVC folder structure?</h3>
<p>Which of these requirements is more common?</p>
<ul>
<li>Change something in every view, controller or model of your project</li>
<li>Add a new field to your model X, show this field to the user, make it editable, the value must be validated against some fancy rules, &hellip;</li>
</ul>
<p>I guess we are on the same page if we see the second one as more common. I would go as far as to say that if you have the first requirement you&rsquo;re either working on a major relaunch or you&rsquo;re not using layout pages, css, abstract classes, [insert random reusability gadget here] correctly.</p>
<p>By default, the ASP.NET MVC project structure advices you to keep every <em>concept</em> in its own area – you therefore might end up with a structure like this:</p>
<ul>
<li>Content
<ul>
<li>CustomerImages
<ul>
<li>AnIconSpecialToCustomers.png</li>
</ul>
</li>
<li>Customers.css</li>
</ul>
</li>
<li>Controllers
<ul>
<li>CustomersController.cs</li>
</ul>
</li>
<li>Models
<ul>
<li>Customer.cs</li>
</ul>
</li>
<li>Repositories
<ul>
<li>CustomerRepository.cs</li>
</ul>
</li>
<li>Scripts
<ul>
<li>Customers.js</li>
</ul>
</li>
<li>Views
<ul>
<li>Customers
<ul>
<li>Create.cshtml</li>
<li>Index.cshtml</li>
</ul>
</li>
</ul>
</li>
<li>ViewModels
<ul>
<li>Customers
<ul>
<li>IndexViewModel.cs</li>
<li>CreateViewModel.cs</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>As soon as you have more than 3 controllers, this becomes hard to navigate. ASP.NET MVC&rsquo;s solution for having a better structure is to use &ldquo;Areas&rdquo;, however in my opinion they do not solve the problem I&rsquo;m talking about. To complete the second requirement I&rsquo;ve mentioned, you still have to navigate through many folders, because most probably, you don&rsquo;t have a distinct views-guy, a distinct model-guy, a distinct controller-guy, &hellip; in your company. It&rsquo;s a lot more common that e.g. only one or two people are working on all of these mentioned files.</p>
<h3 id="grouping-files-by-feature">Grouping files by feature</h3>
<p>When I&rsquo;m talking about a feature, I understand it as a sum of files that are needed to create a user benefit. Therefore, with structuring files by feature, the project structure could look like this:</p>
<ul>
<li>Customers
<ul>
<li>Images
<ul>
<li>AnIconSpecialToCustomers.png</li>
</ul>
</li>
<li>Create.cshtml</li>
<li>CreateViewModel.cs</li>
<li>Customer.cs</li>
<li>CustomerRepository.cs</li>
<li>Customers.css</li>
<li>Customers.js</li>
<li>CustomersController.cs</li>
<li>Index.cshtml</li>
<li>IndexViewModel.cs</li>
</ul>
</li>
</ul>
<p>Think again of our second requirement and of some of the advantages with this structure:</p>
<ul>
<li>You immediately get an overview about how the feature might be implemented.</li>
<li>You immediately see which files <em>might</em> be affected by the requirement. You don’t have to check every concept folder to see if there even is a corresponding file. (there might not be a js-file for every feature, &hellip;)</li>
<li>Every affected file is in one folder. The required navigation in the Solution Explorer is kept to a minimum.</li>
<li>In your source control system, you can look at the entire change history of this feature on one folder.</li>
<li>If you have to implement a new similar feature, you can copy this one folder and use it as a starting point.</li>
<li>&hellip;</li>
</ul>
<h3 id="why-is-there-a-m-in-aspnet-mvc">Why is there a M in ASP.NET MVC?</h3>
<p>I would like to make an exception of my previous structure: It&rsquo;s important to understand that the ASP.NET MVC framework itself (System.Web.Mvc) does NOT give you any built-in support for &ldquo;models&rdquo;. If you require persistent data, you are allowed to use whatever technology you want (Entity Framework, NHibernate, raw ADO.NET, &hellip;). Yes, the project templates by default already reference Entity Framework, but again, this is a separate library and ASP.NET MVC has no dependency on it.</p>
<p>In my opinion this is a very good thing! The traditional three-tier architecture (data, business logic, presentation) still is one of the most important concepts for structuring software systems. ASP.NET MVC clearly targets the presentation tier and shouldn&rsquo;t cover responsibilities from other tiers.</p>
<p>For this reason, we have to move the files &ldquo;Customer.cs&rdquo; and &ldquo;CustomerRepository.cs&rdquo; into a separate library. However, everything else in our folder belongs to the presentation layer.</p>
<h3 id="whats-next">What’s next?</h3>
<p>I plan to do follow-up posts that address the challenges and also possible solutions for this structure, so stay tuned!</p>]]></description></item><item><title>ASP.Net MVC 1.0 has been released!</title><link>https://www.chwe.at/2009/03/asp.net-mvc-1.0-has-been-released/</link><pubDate>Wed, 18 Mar 2009 00:00:00 +0100</pubDate><author>Author</author><guid>https://www.chwe.at/2009/03/asp.net-mvc-1.0-has-been-released/</guid><description><![CDATA[<p>The months of waiting are over! ASP.Net MVC 1.0 has finally been released. Get it while it&rsquo;s HOT!!</p>
<p><a href="http://www.microsoft.com/downloads/details.aspx?FamilyID=53289097-73ce-43bf-b6a6-35e00103cb4b&amp;amp;displaylang=en" target="_blank" rel="noopener noreffer">http://www.microsoft.com/downloads/details.aspx?FamilyID=53289097-73ce-43bf-b6a6-35e00103cb4b&amp;displaylang=en</a></p>
]]></description></item><item><title>Testable and reusable cookie access with ASP.Net MVC RC</title><link>https://www.chwe.at/2009/01/testable-and-reusable-cookie-access-with-asp.net-mvc-rc/</link><pubDate>Wed, 28 Jan 2009 18:35:00 +0100</pubDate><author>Author</author><guid>https://www.chwe.at/2009/01/testable-and-reusable-cookie-access-with-asp.net-mvc-rc/</guid><description><![CDATA[<p>All good things come in threes, so I&rsquo;m writing another post about how to access cookie or sessions. I got inspired by a comment from <a href="http://www.marisic.net/" target="_blank" rel="noopener noreffer">Chris Marisic</a>, who suggested to use a more testable way for this stuff!</p>
<p>Previous posts about this topic:</p>
<ul>
<li><a href="https://www.chwe.at/2009/01/don-t-use-response.cookies-string--to-check-if-a-cookie-exists/" rel="">Don&rsquo;t use Response.Cookies[string] to check if a cookie exists!</a></li>
<li><a href="https://www.chwe.at/2009/01/use-wrappers-to-access-your-cookies-sessions/" rel="">Use wrappers to access your cookies, sessions, &hellip;</a></li>
</ul>
<h3 id="intro">Intro</h3>
<p>Using static wrapper properties is a quick and easy way, but you can&rsquo;t unit test them because they access HttpContext.Current directly. This time I will show you, how you can build a fully unit testable and strongly typed way to access your cookies. As there has been Christmas time 2 days ago (<a href="http://weblogs.asp.net/scottgu/archive/2009/01/27/asp-net-mvc-1-0-release-candidate-now-available.aspx" target="_blank" rel="noopener noreffer">ASP.Net MVC RC1 was released</a> *g*) I’m using the latest MVC bits for my example!</p>
<h3 id="a-reusable-cookie-container">A Reusable Cookie Container</h3>
<p>The cookie container is responsible for getting values out of and into the cookie collections. It does not know which concrete values I&rsquo;m using in my application! This is implemented in a different level, so you can use this class for all of your applications!</p>
<p>In my implementation it&rsquo;s possible to store &ldquo;objects&rdquo; in cookies. I&rsquo;ve implemented it this way because I don&rsquo;t want to convert all my DateTime, int, &hellip; cookies every time! But I also don&rsquo;t want someone to save Lists or any other complex types, so my SetValue() method validates the type of the value and throws an exception, if it&rsquo;s not a value type or nullable value type. That&rsquo;s a little type checking, but I think it is worth it because cookies are set quite rarely!</p>
<p>Here’s the interface:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c#" data-lang="c#"><span class="line"><span class="cl"><span class="k">public</span> <span class="k">interface</span> <span class="nc">ICookieContainer</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">bool</span> <span class="n">Exists</span><span class="p">(</span><span class="kt">string</span> <span class="n">key</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">    <span class="kt">string</span> <span class="n">GetValue</span><span class="p">(</span><span class="kt">string</span> <span class="n">key</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">T</span> <span class="n">GetValue</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;(</span><span class="kt">string</span> <span class="n">key</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">    <span class="k">void</span> <span class="n">SetValue</span><span class="p">(</span><span class="kt">string</span> <span class="n">key</span><span class="p">,</span> <span class="kt">object</span> <span class="k">value</span><span class="p">,</span> <span class="n">DateTime</span> <span class="n">expires</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>I will just show the fundamental code here. If you want to see the whole implementation, please take a look at the code sample. (see bottom)</p>
<p>As you can see below, I&rsquo;ve used the abstracted versions of HttpRequest and HttpResponse, which you get, if you use ASP.Net MVC. That&rsquo;s just one of thousand things I love about ASP.Net MVC. These classes can be used easily in unit tests. Notice that everything can be injected here. There’s no direct access to HttpContext.Current!</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c#" data-lang="c#"><span class="line"><span class="cl"><span class="k">public</span> <span class="k">class</span> <span class="nc">CookieContainer</span> <span class="p">:</span> <span class="n">ICookieContainer</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">private</span> <span class="k">readonly</span> <span class="n">HttpRequestBase</span> <span class="m">_</span><span class="n">request</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">private</span> <span class="k">readonly</span> <span class="n">HttpResponseBase</span> <span class="m">_</span><span class="n">response</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="k">public</span> <span class="n">CookieContainer</span><span class="p">(</span><span class="n">HttpRequestBase</span> <span class="n">request</span><span class="p">,</span> <span class="n">HttpResponseBase</span> <span class="n">response</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// &#34;Check&#34; is a helper class, I&#39;ve got from the &#34;Kigg&#34; project</span>
</span></span><span class="line"><span class="cl">        <span class="n">Check</span><span class="p">.</span><span class="n">IsNotNull</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="s">&#34;request&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">Check</span><span class="p">.</span><span class="n">IsNotNull</span><span class="p">(</span><span class="n">response</span><span class="p">,</span> <span class="s">&#34;response&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="m">_</span><span class="n">request</span> <span class="p">=</span> <span class="n">request</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="m">_</span><span class="n">response</span> <span class="p">=</span> <span class="n">response</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="k">public</span> <span class="kt">string</span> <span class="n">GetValue</span><span class="p">(</span><span class="kt">string</span> <span class="n">key</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">Check</span><span class="p">.</span><span class="n">IsNotEmpty</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="s">&#34;key&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="n">HttpCookie</span> <span class="n">cookie</span> <span class="p">=</span> <span class="m">_</span><span class="n">request</span><span class="p">.</span><span class="n">Cookies</span><span class="p">[</span><span class="n">key</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">cookie</span> <span class="p">!=</span> <span class="k">null</span> <span class="p">?</span> <span class="n">cookie</span><span class="p">.</span><span class="n">Value</span> <span class="p">:</span> <span class="k">null</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="k">public</span> <span class="k">void</span> <span class="n">SetValue</span><span class="p">(</span><span class="kt">string</span> <span class="n">key</span><span class="p">,</span> <span class="kt">object</span> <span class="k">value</span><span class="p">,</span> <span class="n">DateTime</span> <span class="n">expires</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">Check</span><span class="p">.</span><span class="n">IsNotEmpty</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="s">&#34;key&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="kt">string</span> <span class="n">strValue</span> <span class="p">=</span> <span class="n">CheckAndConvertValue</span><span class="p">(</span><span class="k">value</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="n">HttpCookie</span> <span class="n">cookie</span> <span class="p">=</span> <span class="k">new</span> <span class="n">HttpCookie</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">strValue</span><span class="p">)</span> <span class="p">{</span><span class="n">Expires</span> <span class="p">=</span> <span class="n">expires</span><span class="p">};</span>
</span></span><span class="line"><span class="cl">        <span class="m">_</span><span class="n">response</span><span class="p">.</span><span class="n">Cookies</span><span class="p">.</span><span class="n">Set</span><span class="p">(</span><span class="n">cookie</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1">// ... see code sample for full implementation</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Here’s a sample unit tests that proves the testability of this code. I use <a href="http://code.google.com/p/moq/" target="_blank" rel="noopener noreffer">Moq</a> as my mocking framework.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c#" data-lang="c#"><span class="line"><span class="cl"><span class="k">public</span> <span class="k">static</span> <span class="k">class</span> <span class="nc">Mocks</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">public</span> <span class="k">static</span> <span class="n">Mock</span><span class="p">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">HttpRequestBase</span><span class="p">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">HttpRequest</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="kt">var</span> <span class="n">httpRequest</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Mock</span><span class="p">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">HttpRequestBase</span><span class="p">&amp;</span><span class="n">gt</span><span class="p">;();</span>
</span></span><span class="line"><span class="cl">        <span class="n">httpRequest</span><span class="p">.</span><span class="n">Setup</span><span class="p">(</span><span class="n">x</span> <span class="p">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">x</span><span class="p">.</span><span class="n">Cookies</span><span class="p">).</span><span class="n">Returns</span><span class="p">(</span><span class="k">new</span> <span class="n">HttpCookieCollection</span><span class="p">());</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">httpRequest</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="k">public</span> <span class="k">static</span> <span class="n">Mock</span><span class="p">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">HttpResponseBase</span><span class="p">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">HttpResponse</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="kt">var</span> <span class="n">httpResponse</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Mock</span><span class="p">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">HttpResponseBase</span><span class="p">&amp;</span><span class="n">gt</span><span class="p">;();</span>
</span></span><span class="line"><span class="cl">        <span class="n">httpResponse</span><span class="p">.</span><span class="n">Setup</span><span class="p">(</span><span class="n">x</span> <span class="p">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">x</span><span class="p">.</span><span class="n">Cookies</span><span class="p">).</span><span class="n">Returns</span><span class="p">(</span><span class="k">new</span> <span class="n">HttpCookieCollection</span><span class="p">());</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">httpResponse</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// This method is from my CookieContainerTests class</span>
</span></span><span class="line"><span class="cl"><span class="na">
</span></span></span><span class="line"><span class="cl"><span class="na">[TestMethod]</span>
</span></span><span class="line"><span class="cl"><span class="k">public</span> <span class="k">void</span> <span class="n">SetValue_UpdatesExistingCookie</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// Arrange</span>
</span></span><span class="line"><span class="cl">    <span class="k">const</span> <span class="kt">string</span> <span class="n">cookieName</span> <span class="p">=</span> <span class="s">&#34;myCookie&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">const</span> <span class="kt">string</span> <span class="n">cookieValue</span> <span class="p">=</span> <span class="s">&#34;myValue&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">DateTime</span> <span class="n">cookieExpires</span> <span class="p">=</span> <span class="k">new</span> <span class="n">DateTime</span><span class="p">(</span><span class="m">2009</span><span class="p">,</span> <span class="m">1</span><span class="p">,</span> <span class="m">1</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="kt">var</span> <span class="n">httpRequest</span> <span class="p">=</span> <span class="n">Mocks</span><span class="p">.</span><span class="n">HttpRequest</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="kt">var</span> <span class="n">httpResponse</span> <span class="p">=</span> <span class="n">Mocks</span><span class="p">.</span><span class="n">HttpResponse</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="kt">var</span> <span class="n">cookieContainer</span> <span class="p">=</span> <span class="k">new</span> <span class="n">CookieContainer</span><span class="p">(</span><span class="n">httpRequest</span><span class="p">.</span><span class="n">Object</span><span class="p">,</span> <span class="n">httpResponse</span><span class="p">.</span><span class="n">Object</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="n">httpResponse</span><span class="p">.</span><span class="n">Object</span><span class="p">.</span><span class="n">Cookies</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="k">new</span> <span class="n">HttpCookie</span><span class="p">(</span><span class="n">cookieName</span><span class="p">,</span> <span class="s">&#34;oldValue&#34;</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1">// Act</span>
</span></span><span class="line"><span class="cl">    <span class="m">_</span><span class="n">cookieContainer</span><span class="p">.</span><span class="n">SetValue</span><span class="p">(</span><span class="n">cookieName</span><span class="p">,</span> <span class="n">cookieValue</span><span class="p">,</span> <span class="n">cookieExpires</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// Assert</span>
</span></span><span class="line"><span class="cl">    <span class="n">HttpCookie</span> <span class="n">cookie</span> <span class="p">=</span> <span class="n">httpResponse</span><span class="p">.</span><span class="n">Object</span><span class="p">.</span><span class="n">Cookies</span><span class="p">[</span><span class="s">&#34;myCookie&#34;</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="n">Assert</span><span class="p">.</span><span class="n">IsNotNull</span><span class="p">(</span><span class="n">cookie</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">Assert</span><span class="p">.</span><span class="n">AreEqual</span><span class="p">(</span><span class="n">cookie</span><span class="p">.</span><span class="n">Name</span><span class="p">,</span> <span class="n">cookieName</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">Assert</span><span class="p">.</span><span class="n">AreEqual</span><span class="p">(</span><span class="n">cookie</span><span class="p">.</span><span class="n">Value</span><span class="p">,</span> <span class="n">cookieValue</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="n">Assert</span><span class="p">.</span><span class="n">AreEqual</span><span class="p">(</span><span class="n">cookie</span><span class="p">.</span><span class="n">Expires</span><span class="p">,</span> <span class="n">cookieExpires</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>That’s it! Now you have a testable and reusable cookie container!</p>
<h3 id="how-to-use-it-in-your-application">How to use it in your application</h3>
<p>It&rsquo;s really easy to integrate this into your app! Just create an interface that defines all your application-specific properties you want to save in cookies and a concrete implementation of this interface that interacts with the cookie container.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c#" data-lang="c#"><span class="line"><span class="cl"><span class="k">public</span> <span class="k">interface</span> <span class="nc">IAppCookies</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">string</span> <span class="n">UserEmail</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">DateTime</span><span class="p">?</span> <span class="n">LastVisit</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">public</span> <span class="k">class</span> <span class="nc">AppCookies</span> <span class="p">:</span> <span class="n">IAppCookies</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">private</span> <span class="k">readonly</span> <span class="n">ICookieContainer</span> <span class="m">_</span><span class="n">cookieContainer</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="k">public</span> <span class="n">AppCookies</span><span class="p">(</span><span class="n">ICookieContainer</span> <span class="n">cookieContainer</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="m">_</span><span class="n">cookieContainer</span> <span class="p">=</span> <span class="n">cookieContainer</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="k">public</span> <span class="kt">string</span> <span class="n">UserEmail</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">get</span> <span class="p">{</span> <span class="k">return</span> <span class="m">_</span><span class="n">cookieContainer</span><span class="p">.</span><span class="n">GetValue</span><span class="p">(</span><span class="s">&#34;UserEmail&#34;</span><span class="p">);</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">set</span> <span class="p">{</span> <span class="m">_</span><span class="n">cookieContainer</span><span class="p">.</span><span class="n">SetValue</span><span class="p">(</span><span class="s">&#34;UserEmail&#34;</span><span class="p">,</span> <span class="k">value</span><span class="p">,</span> <span class="n">DateTime</span><span class="p">.</span><span class="n">Now</span><span class="p">.</span><span class="n">AddDays</span><span class="p">(</span><span class="m">10</span><span class="p">));</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="k">public</span> <span class="n">DateTime</span><span class="p">?</span> <span class="n">LastVisit</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">get</span> <span class="p">{</span> <span class="k">return</span> <span class="m">_</span><span class="n">cookieContainer</span><span class="p">.</span><span class="n">GetValue</span><span class="p">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">DateTime</span><span class="p">?&amp;</span><span class="n">gt</span><span class="p">;(</span><span class="s">&#34;LastVisit&#34;</span><span class="p">);</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">set</span> <span class="p">{</span> <span class="m">_</span><span class="n">cookieContainer</span><span class="p">.</span><span class="n">SetValue</span><span class="p">(</span><span class="s">&#34;LastVisit&#34;</span><span class="p">,</span> <span class="k">value</span><span class="p">,</span> <span class="n">DateTime</span><span class="p">.</span><span class="n">Now</span><span class="p">.</span><span class="n">AddDays</span><span class="p">(</span><span class="m">10</span><span class="p">));</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>You can now inject this IAppCookies interface to your MVC Controller:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c#" data-lang="c#"><span class="line"><span class="cl"><span class="k">public</span> <span class="k">class</span> <span class="nc">HomeController</span> <span class="p">:</span> <span class="n">Controller</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">private</span> <span class="k">readonly</span> <span class="n">IAppCookies</span> <span class="m">_</span><span class="n">cookies</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">public</span> <span class="n">HomeController</span><span class="p">(</span><span class="n">IAppCookies</span> <span class="n">cookies</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="m">_</span><span class="n">cookies</span> <span class="p">=</span> <span class="n">cookies</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">public</span> <span class="n">ActionResult</span> <span class="n">Index</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">DateTime</span> <span class="n">currentTime</span> <span class="p">=</span> <span class="n">DateTime</span><span class="p">.</span><span class="n">Now</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">IndexViewModel</span> <span class="n">viewModel</span> <span class="p">=</span> <span class="k">new</span> <span class="n">IndexViewModel</span>
</span></span><span class="line"><span class="cl">        <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">CurrentTime</span> <span class="p">=</span> <span class="n">currentTime</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="n">LastVisit</span> <span class="p">=</span> <span class="p">(</span><span class="m">_</span><span class="n">cookies</span><span class="p">.</span><span class="n">LastVisit</span> <span class="p">??</span> <span class="n">currentTime</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">            <span class="n">UserEmail</span> <span class="p">=</span> <span class="m">_</span><span class="n">cookies</span><span class="p">.</span><span class="n">UserEmail</span>
</span></span><span class="line"><span class="cl">        <span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="m">_</span><span class="n">cookies</span><span class="p">.</span><span class="n">LastVisit</span> <span class="p">=</span> <span class="n">currentTime</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">View</span><span class="p">(</span><span class="n">viewModel</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">public</span> <span class="k">class</span> <span class="nc">IndexViewModel</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">public</span> <span class="kt">string</span> <span class="n">UserEmail</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">public</span> <span class="n">DateTime</span> <span class="n">LastVisit</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">public</span> <span class="n">DateTime</span> <span class="n">CurrentTime</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Wow, you’re still reading :-)</p>
<p>That’s all I want to show here! If you want to see more about how the IOC is set up (I’m using <a href="http://structuremap.sourceforge.net/Default.htm" target="_blank" rel="noopener noreffer">StructureMap</a>) or anything else, take a look at the full code:</p>
<ul>
<li><a href="http://cid-16ce9c120fa181c9.skydrive.live.com/self.aspx/chwe.at%20blog/090129%7C_CookieContainerApp.zip" target="_blank" rel="noopener noreffer">Download full code sample</a></li>
</ul>
<p>I look forward to hearing your feedback on this!</p>
<p>Thanks for reading,<br>
Christian Weiss</p>]]></description></item><item><title>Use wrappers to access your cookies, sessions, ...</title><link>https://www.chwe.at/2009/01/use-wrappers-to-access-your-cookies-sessions/</link><pubDate>Mon, 26 Jan 2009 18:45:00 +0100</pubDate><author>Author</author><guid>https://www.chwe.at/2009/01/use-wrappers-to-access-your-cookies-sessions/</guid><description><![CDATA[<p>As described in my <a href="https://www.chwe.at/2009/01/don-t-use-response.cookies-string--to-check-if-a-cookie-exists/" rel="">previous post</a>, I will give you some more details about how you can access your cookies in a type-safe and easy way!</p>
<h3 id="update-read-the-follow-up-post">Update: Read the follow up post</h3>
<ul>
<li><a href="https://www.chwe.at/2009/01/testable-and-reusable-cookie-access-with-asp.net-mvc-rc/" rel="">Testable and reusable cookie access with ASP.Net MVC RC</a></li>
</ul>
<p>The simplest way to do this is by using a little wrapper class like this one:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c#" data-lang="c#"><span class="line"><span class="cl"><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">using</span> <span class="nn">System.Globalization</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">using</span> <span class="nn">System.Web</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl"><span class="k">namespace</span> <span class="nn">CookieWrapper.Web</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">public</span> <span class="k">static</span> <span class="k">class</span> <span class="nc">MyCookies</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">public</span> <span class="k">static</span> <span class="kt">string</span> <span class="n">UserEmail</span>
</span></span><span class="line"><span class="cl">        <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">get</span> <span class="p">{</span> <span class="k">return</span> <span class="n">GetValue</span><span class="p">(</span><span class="s">&#34;UserEmail&#34;</span><span class="p">);</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">            <span class="k">set</span> <span class="p">{</span> <span class="n">SetValue</span><span class="p">(</span><span class="s">&#34;UserEmail&#34;</span><span class="p">,</span> <span class="k">value</span><span class="p">,</span> <span class="n">DateTime</span><span class="p">.</span><span class="n">Now</span><span class="p">.</span><span class="n">AddDays</span><span class="p">(</span><span class="m">10</span><span class="p">));</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">        <span class="k">public</span> <span class="k">static</span> <span class="n">DateTime</span><span class="p">?</span> <span class="n">LastVisit</span>
</span></span><span class="line"><span class="cl">        <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">get</span>
</span></span><span class="line"><span class="cl">            <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="kt">string</span> <span class="n">strDate</span> <span class="p">=</span> <span class="n">GetValue</span><span class="p">(</span><span class="s">&#34;LastVisit&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">                <span class="k">if</span> <span class="p">(</span><span class="n">String</span><span class="p">.</span><span class="n">IsNullOrEmpty</span><span class="p">(</span><span class="n">strDate</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">                    <span class="k">return</span> <span class="k">null</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                <span class="k">return</span> <span class="n">DateTime</span><span class="p">.</span><span class="n">Parse</span><span class="p">(</span><span class="n">strDate</span><span class="p">,</span> <span class="n">CultureInfo</span><span class="p">.</span><span class="n">InvariantCulture</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">            <span class="k">set</span>
</span></span><span class="line"><span class="cl">            <span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="kt">string</span> <span class="n">strDate</span> <span class="p">=</span> <span class="k">value</span><span class="p">.</span><span class="n">HasValue</span> <span class="p">?</span> <span class="k">value</span><span class="p">.</span><span class="n">Value</span><span class="p">.</span><span class="n">ToString</span><span class="p">(</span><span class="n">CultureInfo</span><span class="p">.</span><span class="n">InvariantCulture</span><span class="p">)</span> <span class="p">:</span> <span class="k">null</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">                <span class="n">SetValue</span><span class="p">(</span><span class="s">&#34;LastVisit&#34;</span><span class="p">,</span> <span class="n">strDate</span><span class="p">,</span> <span class="n">DateTime</span><span class="p">.</span><span class="n">Now</span><span class="p">.</span><span class="n">AddDays</span><span class="p">(</span><span class="m">10</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">        <span class="k">private</span> <span class="k">static</span> <span class="kt">string</span> <span class="n">GetValue</span><span class="p">(</span><span class="kt">string</span> <span class="n">key</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">HttpCookie</span> <span class="n">cookie</span> <span class="p">=</span> <span class="n">HttpContext</span><span class="p">.</span><span class="n">Current</span><span class="p">.</span><span class="n">Request</span><span class="p">.</span><span class="n">Cookies</span><span class="p">[</span><span class="n">key</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="p">(</span><span class="n">cookie</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="k">return</span> <span class="n">cookie</span><span class="p">.</span><span class="n">Value</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="k">null</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">        <span class="k">private</span> <span class="k">static</span> <span class="k">void</span> <span class="n">SetValue</span><span class="p">(</span><span class="kt">string</span> <span class="n">key</span><span class="p">,</span> <span class="kt">string</span> <span class="k">value</span><span class="p">,</span> <span class="n">DateTime</span> <span class="n">expires</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">HttpContext</span><span class="p">.</span><span class="n">Current</span><span class="p">.</span><span class="n">Response</span><span class="p">.</span><span class="n">Cookies</span><span class="p">[</span><span class="n">key</span><span class="p">].</span><span class="n">Value</span> <span class="p">=</span> <span class="k">value</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="n">HttpContext</span><span class="p">.</span><span class="n">Current</span><span class="p">.</span><span class="n">Response</span><span class="p">.</span><span class="n">Cookies</span><span class="p">[</span><span class="n">key</span><span class="p">].</span><span class="n">Expires</span> <span class="p">=</span> <span class="n">expires</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>All you have to do is create a static property for every cookie that you would like to work with. As you can see you also have the Expires-times administrated in one single place!</p>
<p>Now you can access the values as seen below and you don&rsquo;t have to worry about the cookie implementation-details in every place.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c#" data-lang="c#"><span class="line"><span class="cl"><span class="n">tbLastVisit</span><span class="p">.</span><span class="n">Text</span> <span class="p">=</span> <span class="n">MyCookies</span><span class="p">.</span><span class="n">UserEmail</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="n">MyCookies</span><span class="p">.</span><span class="n">LastVisit</span> <span class="p">=</span> <span class="n">DateTime</span><span class="p">.</span><span class="n">Now</span><span class="p">;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Of course, you can also use this same approach for working with session data or any other key-based collection.</p>
<p>Thanks for reading,<br>
Christian Weiss</p>]]></description></item><item><title>Don't use Response.Cookies[string] to check if a cookie exists!</title><link>https://www.chwe.at/2009/01/don-t-use-response.cookies-string--to-check-if-a-cookie-exists/</link><pubDate>Mon, 26 Jan 2009 15:57:00 +0100</pubDate><author>Author</author><guid>https://www.chwe.at/2009/01/don-t-use-response.cookies-string--to-check-if-a-cookie-exists/</guid><description><![CDATA[<h3 id="update-follow-up-posts">Update: Follow Up Posts</h3>
<ul>
<li><a href="https://www.chwe.at/2009/01/use-wrappers-to-access-your-cookies-sessions/" rel="">Use wrappers to access your cookies, sessions, &hellip;</a></li>
<li><a href="https://www.chwe.at/2009/01/testable-and-reusable-cookie-access-with-asp.net-mvc-rc/" rel="">Testable and reusable cookie access with ASP.Net MVC RC</a></li>
</ul>
<h3 id="the-short-explanation-if-you-dont-like-to-read-the-entire-story">The short explanation, if you don&rsquo;t like to read the entire story</h3>
<p>If you use code like <code>if (Response.Cookies[&quot;mycookie&quot;] != null) { … }</code>, ASP.Net automatically generates a new cookie with the name &ldquo;mycookie&rdquo; in the background and overwrites your old cookie! Always use the Request.Cookies-Collection to read cookies!</p>
<h3 id="the-long-explanation-and-some-useful-advices-at-the-end">The long explanation and some useful advices at the end</h3>
<p>You can access the Cookies-Collection in two different places in ASP.Net:</p>
<ul>
<li><a href="http://msdn.microsoft.com/en-us/library/system.web.httprequest.cookies.aspx" target="_blank" rel="noopener noreffer"><em>Request.Cookies</em></a> gives you the cookies that are sent from the browser to your server.</li>
<li>With <a href="http://msdn.microsoft.com/en-us/library/system.web.httpresponse.cookies.aspx" target="_blank" rel="noopener noreffer"><em>Response.Cookies</em></a>, you can send cookies from your server to the browser.</li>
</ul>
<h3 id="storing-cookies">Storing cookies</h3>
<p>To make your life easier (or harder, as you will see later), ASP.Net gives you the possibility to add a cookie to the browser this way:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-csharp" data-lang="csharp"><span class="line"><span class="cl"><span class="n">Response</span><span class="p">.</span><span class="n">Cookies</span><span class="p">[</span><span class="s">&#34;mycookie&#34;</span><span class="p">].</span><span class="n">Value</span> <span class="p">=</span> <span class="s">&#34;some value&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="n">Response</span><span class="p">.</span><span class="n">Cookies</span><span class="p">[</span><span class="s">&#34;mycookie&#34;</span><span class="p">].</span><span class="n">Expires</span> <span class="p">=</span> <span class="n">DateTime</span><span class="p">.</span><span class="n">Now</span><span class="p">.</span><span class="n">AddDays</span><span class="p">(</span><span class="m">10</span><span class="p">);</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>As you can see here, the .NET framework automatically generates the HttpCookie instance with the name &ldquo;mycookie&rdquo; in the background and adds it to the collection.</p>
<p></p>
<p>Sending cookies to the browser this way is perfectly fine.</p>
<h3 id="reading-cookies">Reading Cookies</h3>
<p>The important thing you have to know when reading cookies is, that the Response.Cookies collection is <em>empty</em> at the beginning of every request. The cookie with the name &ldquo;mycookie&rdquo; can only be found in the Request.Cookies-Collection!</p>
<p>If you use the following line to check the cookie, a new cookie with the name &ldquo;mycookie&rdquo; and an empty value gets added to the Response.Cookies Collection and <em>this overwrites your old cookie</em>! (See framework code above!)</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-csharp" data-lang="csharp"><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span><span class="n">Response</span><span class="p">.</span><span class="n">Cookies</span><span class="p">[</span><span class="s">&#34;mycookie&#34;</span><span class="p">]</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// This automatically overwrites the existing cookie with an empty value!!!</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>The correct way to access cookies is by using the Request.Cookies-Collection:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-csharp" data-lang="csharp"><span class="line"><span class="cl"><span class="k">if</span> <span class="p">(</span><span class="n">Request</span><span class="p">.</span><span class="n">Cookies</span><span class="p">[</span><span class="s">&#34;mycookie&#34;</span><span class="p">]</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// This is fine</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="so-remember-the-following-rules">So remember the following rules</h3>
<ul>
<li>To read cookies, ALWAYS use the Request.Cookies-Collection</li>
<li>Only use the Response.Cookies-Collection to set or change cookies</li>
</ul>
<h3 id="how-can-i-make-it-better-and-more-beautiful">How can I make it better and more beautiful?</h3>
<p>Accessing the Request.Cookies or Response.Cookies collection directly is lame! You can&rsquo;t easily test this code and you don&rsquo;t have all the other cool stuff like type safety and IntelliSense for the keys.</p>
<p>I will write a follow-up post right after this one with an detailed example on how you can do it better!</p>
<p>Thanks for reading,<br>
Christian Weiss</p>]]></description></item></channel></rss>