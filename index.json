[{"categories":["Azure"],"content":"I’ve been building a microservices template as part of my master’s thesis. It’s using GitHub for code hosting and Microsoft Azure for hosting the resources. One key requirement of my template is to use Managed identities for Azure everywhere and not use any secrets when connecting to dependent resources. Managed identities are a great feature and very easy to use for built-in workloads like VMs, Azure Container Apps, App Services. However, until recently, managed identities could not be used for non-native workloads like GitHub Actions. We had to use an Azure AD app registration instead and store its credentials (including a CLIENT_SECRET) as GitHub secrets. With the introduction of workload identity federation for app registrations, it was then possible to configure a trust relationship between GitHub and Azure that allows the GitHub Actions to authenticate to Azure without the need for providing a CLIENT_SECRET. This would have already solved my requirement for not needing any secrets, but the problem is, that creating an Azure AD app registration requires elevated permissions and therefore often can’t easily be done by regular developers. The good news is that Microsoft now also supports federated credentials for user-assigned managed identities! Managed identities only require regular Azure RBAC rights and can be created via Bicep templates and are therefore much easier to integrate into Infrastructure as Code-processes and CI/CD systems. Uday Hegde has written a good blog post explaining federated credentials for managed identities: https://blog.identitydigest.com/azuread-federate-mi/ The remainder of this blog post will focus on how federated credentials for managed identities are used in my microservices template. Have a look at the project’s README.md for more details. ","date":"2022-10-26","objectID":"/github-actions-with-managed-identities/:0:0","tags":null,"title":"Deploy from GitHub to Azure without any secrets using managed identities","uri":"/github-actions-with-managed-identities/"},{"categories":["Azure"],"content":"Overview For my microservices template, the entire process for creating the Azure resources and connecting GitHub with Azure is automated via the init-platform.ps1 script. The script must be executed manually once, since there’s the “chicken and egg”-problem of already needing the managed identity to deploy Azure resources via a GitHub workflow. The script will execute the following steps (among other things that are out of scope for this post): It will create a resource group in Azure that will host the managed identity. It will create a user-assigned managed identity in this resource group. The managed identity will be given Contributor \u0026 UserAccessAdministrator rights on the Azure subscription. (So that the GitHub workflows of my services can create Azure resources and assign rights to newly created managed identities) The managed identity will be given additional AAD permissions. (My GitHub workflows need to be able to query AAD groups) A GitHub environment called platform will be created via the GitHub CLI. This will be used to protect further deployments with required reviewers or other protection rules. Federated credentials will be added to the managed identity for the main-branch and for the platform-environment. There must be a federated credential for each branch and GitHub environment that we want to deploy from. The necessary resource IDs (tenant id, subscription id, client id of our managed identity) will be created as GitHub secrets ","date":"2022-10-26","objectID":"/github-actions-with-managed-identities/:1:0","tags":null,"title":"Deploy from GitHub to Azure without any secrets using managed identities","uri":"/github-actions-with-managed-identities/"},{"categories":["Azure"],"content":"Deploying the managed identity and its federated credentials to Azure The template creates all Azure resources via Bicep-templates stored in the infrastructure directory. The managed identity for GitHub is part of the platform-resources that are shared by all environments of my microservice template (e.g., development, production). To create the managed identity for GitHub, the following Bicep-template is used: resource githubIdentity 'Microsoft.ManagedIdentity/userAssignedIdentities@2022-01-31-preview' = { name: githubIdentityName location: location tags: tags } (Original source) Creating the federated credentials via Bicep is more complex. Since I need federated credentials for the main-branch, the shared platform-environment, and each actual application environment (development, production), I’m creating a list variable that holds the name and subject for each credential based on my global config-file: var config = loadJsonContent('./../config.json') // All credentials must be in one list as concurrent writes to /federatedIdentityCredentials are not allowed. var ghBranchCredentials = [{ name: 'github-branch-${githubDefaultBranchName}' subject: 'repo:${githubRepoNameWithOwner}:ref:refs/heads/${githubDefaultBranchName}' }] var ghPlatformCredentials = [{ name: 'github-env-platform' subject: 'repo:${githubRepoNameWithOwner}:environment:platform' }] var ghEnvironmentCredentials = [for item in items(config.environments): { name: 'github-env-${item.key}' subject: 'repo:${githubRepoNameWithOwner}:environment:${item.key}' }] var githubCredentials = concat(ghBranchCredentials, ghPlatformCredentials, ghEnvironmentCredentials) (Original source) The credential resources are then created via a Bicep-loop. It’s important that batchSize(1) is used because concurrent writes are not supported and will result in a deployment error. @batchSize(1) resource federatedCredentials 'Microsoft.ManagedIdentity/userAssignedIdentities/federatedIdentityCredentials@2022-01-31-preview' = [for item in githubCredentials: { name: item.name parent: githubIdentity properties: { audiences: [ 'api://AzureADTokenExchange' ] issuer: 'https://token.actions.githubusercontent.com' subject: item.subject } }] (Original source) The fields audiences, issuer and subject are set according to the requirements by GitHub. ","date":"2022-10-26","objectID":"/github-actions-with-managed-identities/:2:0","tags":null,"title":"Deploy from GitHub to Azure without any secrets using managed identities","uri":"/github-actions-with-managed-identities/"},{"categories":["Azure"],"content":"Assigning RBAC-roles to the managed identity In order for my GitHub-worflows to be able to deploy resources to Azure, the managed identity must have the appropriate RBAC permissions. For my template, I’m assigning the Contributor-role and UserAccessAdministrator-role at the subscription-scope to the identity. The UserAccessAdministrator-role is necessary to allow my GitHub workflows to create other managed identities and to assign RBAC-roles to them. To assign a RBAC-role, we must know its internal ID. For built-in roles, this ID can be found here: https://learn.microsoft.com/en-us/azure/role-based-access-control/built-in-roles Here’s the code to reference the Contributor-role: resource contributorRoleDefinition 'Microsoft.Authorization/roleDefinitions@2022-04-01' existing = { scope: subscription() name: 'b24988ac-6180-42a0-ab88-20f7382dd24c' } (Original source) With the reference to the role definition, we can now create the actual role assignment for the managed identity: resource githubIdentityContributor 'Microsoft.Authorization/roleAssignments@2020-04-01-preview' = { name: guid(subscription().id, 'github', 'Contributor') properties: { roleDefinitionId: contributorRoleDefinition.id principalId: githubIdentity.outputs.githubIdentityPrincipalId principalType: 'ServicePrincipal' } } (Original source) NOTE: Azure does not automatically delete RBAC-role assignments when the managed identity is deleted. You must manually delete them or future re-deployments will fail with a conflict. ","date":"2022-10-26","objectID":"/github-actions-with-managed-identities/:3:0","tags":null,"title":"Deploy from GitHub to Azure without any secrets using managed identities","uri":"/github-actions-with-managed-identities/"},{"categories":["Azure"],"content":"Assigning AAD permissions to the managed identity Some of my GitHub workflows need to be able to query the Azure AD graph for details about an Azure AD group and to do so, the managed identity must have the proper AAD permissions. Unfortunately, AAD resources and permissions can NOT be created via Bicep templates, so we need to either use the AzureAD-module (which is planned for deprecation), its successor-module Microsoft.Graph, or use the Graph REST API. Since I’m already using the Az-module to deploy my Bicep-templates, I didn’t want to use another module and potentially deal with separate sign-in methods and tokens, so I decided to just call the Graph API directly: # A list of all AAD permissions that should be granted for the managed identity # https://learn.microsoft.com/en-us/graph/permissions-reference $githubIdentityMsGraphPermissions = @( \"Group.Read.All\" ) # This is a well-known ID for the MS Graph service principal $msGraphSp = Get-AzAdServicePrincipal -ApplicationId \"00000003-0000-0000-c000-000000000000\" # We're using the Az-module to aquire an access token for the Graph API $graphAccessToken = Get-AzAccessToken -ResourceUrl \"https://graph.microsoft.com/\" # https://learn.microsoft.com/en-us/graph/api/resources/approleassignment $apiUrl = \"https://graph.microsoft.com/v1.0/servicePrincipals/$($githubIdentity.Id)/appRoleAssignments\" # We're only creating assignments that don't yet exist $existingAssignments = Invoke-RestMethod -Uri $apiUrl -Method Get -Headers @{ Authorization = \"Bearer $($graphAccessToken.Token)\" } foreach ($permissionName in $githubIdentityMsGraphPermissions) { #$permissionName = \"Group.Read.All\" $appRoleId = ($msGraphSp.AppRole | Where-Object { $_.Value -eq $permissionName } | Select-Object).Id $exists = $existingAssignments.value | Where-Object { $_.appRoleId -eq $appRoleId } if ($exists) { Write-Success \"Permission '$permissionName' already exists\" } else { $body = @{ appRoleId = $appRoleId resourceId = $msGraphSp.Id principalId = $githubIdentity.Id } Invoke-RestMethod -Uri $apiUrl -Method Post -ContentType \"application/json\" ` -Headers @{ Authorization = \"Bearer $($graphAccessToken.Token)\" } ` -Body $($body | convertto-json) | Out-Null Write-Success \"Permission '$permissionName' created\" } } (Original source) NOTE: To execute this step, you must have elevated permissions in Azure AD. ","date":"2022-10-26","objectID":"/github-actions-with-managed-identities/:4:0","tags":null,"title":"Deploy from GitHub to Azure without any secrets using managed identities","uri":"/github-actions-with-managed-identities/"},{"categories":["Azure"],"content":"Creating a GitHub environment for the platform My template uses GitHub environments to protect deployments to Azure. As with all previous steps, this could be done manually via the UI, but I prefer automation and therefore create the environment via the script by using the GitHub CLI. The GitHub CLI does not yet have support for environments, so we need to use gh api to call the GitHub REST API. The script also uses a custom Exec-function (copied from psake) to fail the PowerShell script if the invocation of the native EXE fails (you’d have to always check $LastExitCode otherwise). To create a GitHub environment, I’m using the following code: $body = @{ reviewers = @( @{ type = \"User\"; id = $ghUser.id } ) } | ConvertTo-Json -Compress $ghEnv = Exec { $body | gh api \"/repos/$($ghRepo.nameWithOwner)/environments/$environment\" -X PUT -H \"Accept: application/vnd.github+json\" --input - } | ConvertFrom-Json (Original source) ","date":"2022-10-26","objectID":"/github-actions-with-managed-identities/:5:0","tags":null,"title":"Deploy from GitHub to Azure without any secrets using managed identities","uri":"/github-actions-with-managed-identities/"},{"categories":["Azure"],"content":"Creating the resource IDs as secrets in GitHub While there are no passwords to authenticate GitHub with Azure, we still need to tell GitHub about the managed identity and its target tenant \u0026 subscription. We therefore need to store some IDs as GitHub secrets. These IDs will then be used by the GitHub workflows when running deployments to Azure. Exec { gh secret set \"AZURE_CLIENT_ID\" -b $githubIdentity.AppId } Exec { gh secret set \"AZURE_SUBSCRIPTION_ID\" -b $((Get-AzContext).Subscription.Id) } Exec { gh secret set \"AZURE_TENANT_ID\" -b $((Get-AzContext).Subscription.TenantId) } (Original source) ","date":"2022-10-26","objectID":"/github-actions-with-managed-identities/:6:0","tags":null,"title":"Deploy from GitHub to Azure without any secrets using managed identities","uri":"/github-actions-with-managed-identities/"},{"categories":["Azure"],"content":"Using the managed identity in a GitHub workflow With the preceding steps, the managed identity has been created, federated credentials have been assigned and GitHub has references to the required IDs as GitHub secrets. We’re therefore finally ready to do any further deployments via GitHub workflows. My microservice template includes multiple GitHub workflows. There’s a workflow for each service, for shared environment resources, and for the shared platform resources. We’ll look at the platform.yml workflow as an example for the following steps. In order for GitHub-workflows to work with federated credentials, we must add permissions for the token: permissions: id-token: write contents: read (Original source) We can then use azure/login to authenticate with Azure (using the previously created GitHub secrets): - uses: azure/login@v1 with: client-id: ${{ secrets.AZURE_CLIENT_ID }} tenant-id: ${{ secrets.AZURE_TENANT_ID }} subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }} # This allows us to use Azure PowerShell in addition to Azure CLI enable-AzPSSession: true (Original source) That’s it. Further calls via the Az-module should then be able to run successfully: New-AzSubscriptionDeployment ` -Location $config.location ` -Name (\"platform-\" + (Get-Date).ToString(\"yyyyMMddHHmmss\")) ` -TemplateFile .\\platform\\main.bicep ` -TemplateParameterObject @{ deployGitHubIdentity = $false } ` -Verbose | Out-Null (Original source) Feel free to start a discussion or create an issue in cwe1ss/msa-template if you have any feedback. ","date":"2022-10-26","objectID":"/github-actions-with-managed-identities/:7:0","tags":null,"title":"Deploy from GitHub to Azure without any secrets using managed identities","uri":"/github-actions-with-managed-identities/"},{"categories":null,"content":"Christian Weiss is working as a technical lead in Austria. He builds websites since 2000, works with Azure since 2015 and creates Flutter apps since 2019. ","date":"2021-02-16","objectID":"/about/:0:0","tags":null,"title":"About me","uri":"/about/"},{"categories":[".NET"],"content":"Do you use a load balancer that isn’t tightly integrated with your orchestrator and therefore doesn’t know upfront when the orchestrator has to stop an instance of your ASP.NET Core application for an upgrade / a scaling action / a restart? Does this result in a few failing requests until the load balancer has finally figured out that the instance is gone? If so, this blog post might be for you! ","date":"2020-10-22","objectID":"/zero-downtime-updates-with-aspnet-core/:0:0","tags":null,"title":"Simple zero-downtime updates with ASP.NET Core and health checks","uri":"/zero-downtime-updates-with-aspnet-core/"},{"categories":[".NET"],"content":"Problem details We are hosting our ASP.NET Core applications in Azure Service Fabric and public traffic is routed into the cluster via Azure Application Gateway. Application Gateway doesn’t have a direct integration with Service Fabric’s naming resolution, so it can’t automatically forward traffic to the dynamic ports \u0026 nodes of a service in the cluster. Instead, we need to use fixed ports for our ASP.NET Core applications in Service Fabric and we use simple port based routing rules in Application Gateway. Example: A stateless ASP.NET Core application fabric:/MyBlog/MyBlogWebsite is running in our Service Fabric cluster with a fixed port of 5000 and with InstanceCount=-1 (so it runs on each node). To expose this application, Application Gateway is configured to forward all requests targeting www.chwe.at to the fixed 5000-port on each node in the Service Fabric VMSS (virtual machine scale set). This works great. However, during application updates, Service Fabric will stop the existing process before it starts the new application version. This is required because the port 5000 has to be released before it can be bound again to the new version. Application Gateway isn’t aware of this short termination, so any requests it forwards to the node during that time will fail. ","date":"2020-10-22","objectID":"/zero-downtime-updates-with-aspnet-core/:1:0","tags":null,"title":"Simple zero-downtime updates with ASP.NET Core and health checks","uri":"/zero-downtime-updates-with-aspnet-core/"},{"categories":[".NET"],"content":"Health checks to the rescue Azure Application Gateway (and probably any other load balancer) supports health probes to decide if it should forward a request to a given node. In the simplest case, it will just periodically do a HTTP request to the root of your application and if it doesn’t receive a response or if the response returns a server error, it will take the instance out of rotation after a few failed attempts. So if one of your application instances gets shut down, the load balancer will stop forwarding traffic to it after some time. However, this still means that there will be failed requests until that has happened. How can we improve this? Should we change our deployment process and call an API of our load balancer to actively take the instance out of rotation before we do the update and call another API of the load balancer to take it back in once the new instance is running? This would definitely work, but unfortunately Azure Application Gateway doesn’t have such an API. We would also have to integrate this into every other orchestration action that results in instance shutdowns (scale down, move to another node, …). Wouldn’t it be nice if we could just delay the shutdown of our instance and keep serving requests until the load balancer has figured out that it should take the instance out of rotation? We can do this in ASP.NET Core by combining the following ideas: We need to expose the health status of the application on it’s own URL - e.g. /health With this separate URL, we can switch the health to Unhealthy, once the application receives a shutdown signal from the orchestrator (e.g. CTRL+C). We can now delay the shutdown until the load balancer health-timeout has been reached. Until then, we’ll just continue to serve any incoming requests. You can find the finished code for this post here: https://github.com/cwe1ss/blog-zero-downtime-with-health-checks. If you want to follow along step by step, look at the separate commits. They area also linked in each step below. ","date":"2020-10-22","objectID":"/zero-downtime-updates-with-aspnet-core/:2:0","tags":null,"title":"Simple zero-downtime updates with ASP.NET Core and health checks","uri":"/zero-downtime-updates-with-aspnet-core/"},{"categories":[".NET"],"content":"Set up the /health-endpoint in ASP.NET Core ASP.NET Core has a built-in feature for health checks. To enable it, we need to register the feature with the DI container by calling services.AddHealhChecks() in Startup.ConfigureServices() and we need to enable the endpoint on the request pipeline by calling endpoints.MapHealthChecks(\"/health\"); in the app.UseEndpoints(...)-block of Startup.Configure(). After this, we can run the app and navigate to http://localhost:5000/health. This will return the text “Healthy” and the status code 200. See all changes from this step in the Git commit. ","date":"2020-10-22","objectID":"/zero-downtime-updates-with-aspnet-core/:3:0","tags":null,"title":"Simple zero-downtime updates with ASP.NET Core and health checks","uri":"/zero-downtime-updates-with-aspnet-core/"},{"categories":[".NET"],"content":"Add a health check that switches to Unhealthy, once the application shuts down We can add our own health checks to the ASP.NET Core health system by implementing the interface Microsoft.Extensions.Diagnostics.HealthChecks.IHealthCheck. To get notified when the application is being shut down, we can use Microsoft.Extensions.Hosting.IHostApplicationLifetime. This interface provides a ApplicationStopping-hook that is triggered when the shutdown signal is received but before the application stops processing requests! When combined, we get the following first simple version of our ShuttingDownHealthCheck: public class ShuttingDownHealthCheck : IHealthCheck { private HealthStatus _status = HealthStatus.Healthy; public ShuttingDownHealthCheck(IHostApplicationLifetime appLifetime) { appLifetime.ApplicationStopping.Register(() =\u003e { Console.WriteLine(\"Shutting down\"); _status = HealthStatus.Unhealthy; }); } public Task\u003cHealthCheckResult\u003e CheckHealthAsync( HealthCheckContext context, CancellationToken cancellationToken = default) { var result = new HealthCheckResult(_status); return Task.FromResult(result); } } Our class also needs to be registered with the DI container by calling .AddCheck\u003cShuttingDownHealthCheck\u003e(\"shutting_down\") on the return object of services.AddHealthChecks(). However, it’s important to know that by default, ASP.NET Core initializes the class for every request to the health endpoint. This doesn’t work for our scenario as we need the global _status variable and just a single ApplicationStopping-registration. To ensure the class is created only once, we have to add it as a singleton to the DI framework via services.AddSingleton\u003cShuttingDownHealthCheck\u003e();. It’s also important to know, that our ShuttingDownHealthCheck-class will only be initialized, when it is requested for the first time. So if we just run the app, navigate to http://localhost:5000 and press CTRL+C, our “Shutting down” message will NOT appear in the console. If we navigate to http://localhost:5000/health and press CTRL+C afterwards, the “Shutting down” message will appear on the console! This behavior is fine for our scenario as the load balancer will continuously invoke this endpoint anyway! See all changes from this step in the Git commit. ","date":"2020-10-22","objectID":"/zero-downtime-updates-with-aspnet-core/:4:0","tags":null,"title":"Simple zero-downtime updates with ASP.NET Core and health checks","uri":"/zero-downtime-updates-with-aspnet-core/"},{"categories":[".NET"],"content":"Delay the shutdown If you’ve followed the steps so far, you will have noticed that the application still shuts down immediately after “Shutting down” has been printed to the console. To delay the shutdown, we can simply add a Thread.Sleep() to the code in our ApplicationStopping-handler. With this, the main thread is blocked but regular requests will still be processed on other threads. Let’s add Thread.Sleep(TimeSpan.FromSeconds(15)); after our _status = HealthStatus.Unhealthy; statement and run the app again. If we now navigate to http://localhost:5000/health and press CTRL+C afterwards, our “Shutting down” message will appear on the console and the application will keep running! Any request to the /health-endpoint during that time will now return “Unhealthy” with a status code 503 (Service unavailable). When deployed, the load balancer will now receive this Unhealthy response and take the instance out of rotation after a few attempts. Until then, any regular requests it sends to the instance will still be processed! ","date":"2020-10-22","objectID":"/zero-downtime-updates-with-aspnet-core/:5:0","tags":null,"title":"Simple zero-downtime updates with ASP.NET Core and health checks","uri":"/zero-downtime-updates-with-aspnet-core/"},{"categories":[".NET"],"content":"Improve the health check There’s still a few issues with our custom health check: ASP.NET Core has a default shutdown timeout of 5 seconds. After this, it will throw an OperationCanceledException and therefore not gracefully shutdown other background services etc. The shutdown delay is annoying during development as we now can’t quickly close the app. Our “Shutting down” message is just printed to the console. It would be nice if it were sent to the regular logging system. To increase the ASP.NET Core ShutdownTimeout, we need to configure the HostOptions class in Startup.ConfigureServices(): services.Configure\u003cHostOptions\u003e(option =\u003e { option.ShutdownTimeout = System.TimeSpan.FromSeconds(30); }); To improve our health check, we’ll introduce IHostEnvironment to detect if we’re running in Production-mode and an ILogger. Our ApplicationStopping-registration will now look like this: appLifetime.ApplicationStopping.Register(() =\u003e { _status = HealthStatus.Unhealthy; bool delayShutdown = _hostEnvironment.IsProduction(); if (delayShutdown) { var shutdownDelay = TimeSpan.FromSeconds(25); _logger.LogInformation( \"Delaying shutdown for {Seconds} seconds\", shutdownDelay.TotalSeconds); // ASP.NET Core requests are processed on separate threads, // so we can just put the main thread on sleep. Thread.Sleep(shutdownDelay); _logger.LogInformation(\"Shutdown delay completed\"); } }); Of course, it would also be possible to just skip the registration ouf our health check in the Startup.ConfigureServices()-method. The logic in our ASP.NET Core application is now finished! See all changes from this step in the Git commit. ","date":"2020-10-22","objectID":"/zero-downtime-updates-with-aspnet-core/:6:0","tags":null,"title":"Simple zero-downtime updates with ASP.NET Core and health checks","uri":"/zero-downtime-updates-with-aspnet-core/"},{"categories":[".NET"],"content":"Set the load balancer settings It’s important to understand that we’ve set a 25 second shutdown delay. This means, the load balancer must take the instance out of rotation before that time. If it fails to do so, there will be failed requests again. We therefore need to set up our load balancing probes e.g. in the following way: Target URL: /health Our custom health endpoint Interval: 5 seconds Run the probe every 5 seconds Timeout: 4 seconds If the service doesn’t respond, fail after 4 seconds Attempts: 3 Take the service out of rotation after 3 failed attempts With these settings, the load balancer will take the service out of rotation after 15-20 seconds! Of course, you can change these settings to whatever fits your scenario best. ","date":"2020-10-22","objectID":"/zero-downtime-updates-with-aspnet-core/:7:0","tags":null,"title":"Simple zero-downtime updates with ASP.NET Core and health checks","uri":"/zero-downtime-updates-with-aspnet-core/"},{"categories":[".NET"],"content":"Summary This post is quite long as it tries to explain everything step by step, but in general, the idea is very simple: We use a custom health check to mark the instance as Unhealthy once the shutdown has been requested We delay the shutdown for 25 seconds. Any regular requests will still be processed during that time. We make sure the load balancer takes the instance out of rotation before these 25 seconds are over. You can find the code for this blog here: https://github.com/cwe1ss/blog-zero-downtime-with-health-checks. Follow the commits to see the separate steps we’ve taken. ","date":"2020-10-22","objectID":"/zero-downtime-updates-with-aspnet-core/:8:0","tags":null,"title":"Simple zero-downtime updates with ASP.NET Core and health checks","uri":"/zero-downtime-updates-with-aspnet-core/"},{"categories":["Mobile Development"],"content":"These are the requirements for our app: Our Flutter app should target iOS and Android. We want a DEV version and a LIVE version of our app, each targeting a different API URL. Developers should never have to manually change any code to switch between the environments. We want to be able to have the DEV app and the LIVE app installed on the same device at the same time. The best way to solve these requirements in Flutter is to use flavors. There are also some other tutorials for this linked on the official Flutter docs which might be helpful. The code for this guide is stored on GitHub and changes for each section are separate commits that are linked in the section below. As we need to change settings in XCode, we need a Mac with Android Studio and XCode for this tutorial. You also need to have Flutter installed already. Follow the Getting started-docs if you still need to install it. I’m using Flutter v1.22.0 for this tutorial. ","date":"2020-10-03","objectID":"/flutter-flavors/:0:0","tags":null,"title":"Using Flutter flavors to separate the DEV and LIVE environment","uri":"/flutter-flavors/"},{"categories":["Mobile Development"],"content":"Create the Git repository and clone it locally Create a new Git repository. Mine is: https://github.com/cwe1ss/flutter-flavors-ci-cd git clone https://github.com/cwe1ss/flutter-flavors-ci-cd.git cd flutter-flavors-ci-cd/ ","date":"2020-10-03","objectID":"/flutter-flavors/:1:0","tags":null,"title":"Using Flutter flavors to separate the DEV and LIVE environment","uri":"/flutter-flavors/"},{"categories":["Mobile Development"],"content":"Create the Flutter app Let’s get started by creating the Flutter app, named flutter_flavors via the Flutter CLI directly in the root folder of our repository: flutter create --project-name flutter_flavors . Run the app on an Android device/emulator to ensure it works. See all changes from this step in the Git commit. ","date":"2020-10-03","objectID":"/flutter-flavors/:2:0","tags":null,"title":"Using Flutter flavors to separate the DEV and LIVE environment","uri":"/flutter-flavors/"},{"categories":["Mobile Development"],"content":"Add a Flutter build configuration for each flavor in Android Studio We want to have two flavors called dev and live. If you want to launch a flutter app with a flavor, you have to use the --flavor NAME parameter in the Flutter CLI. To automatically start the app with a flavor in Android Studio we need to change the build configurations: Find main.dart in the Android Studio top toolbar and select Edit Configurations.... This opens the “Run/Debug Configurations” window. Change the Name: field to dev For Build flavor: set dev as well. Make sure “Share through VCS” is selected. Copy the dev configuration (It’s an icon in the top left of the window) Change the Name: and Build flavor: values to live Make sure “Share through VCS” is selected as well Close the dialog. Instead of “main.dart”, it will now display “dev” in the top toolbar. IMPORTANT: Flavor names may not start with “test” as that’s not allowed by Android. ","date":"2020-10-03","objectID":"/flutter-flavors/:3:0","tags":null,"title":"Using Flutter flavors to separate the DEV and LIVE environment","uri":"/flutter-flavors/"},{"categories":["Mobile Development"],"content":"Add the build configurations to Git When you select “Share through VCS”, Android studio will create files in the .idea/runConfigurations folder, however they’ll be ignored by the existing .gitignore file. We’ll therefore add these files manually to Git, so that other users in the team can use it as well: git add .idea/runConfigurations/dev.xml -f git add .idea/runConfigurations/live.xml -f git commit -m 'Persist flutter build configurations' See all changes from this step in the Git commit. ","date":"2020-10-03","objectID":"/flutter-flavors/:3:1","tags":null,"title":"Using Flutter flavors to separate the DEV and LIVE environment","uri":"/flutter-flavors/"},{"categories":["Mobile Development"],"content":"Set up flavors for Android In order to actually use different flavors, we need to set them up in the lib-folder and in each platform (android, ios). We’ll start with the android part. ","date":"2020-10-03","objectID":"/flutter-flavors/:4:0","tags":null,"title":"Using Flutter flavors to separate the DEV and LIVE environment","uri":"/flutter-flavors/"},{"categories":["Mobile Development"],"content":"Add the method channel in Android code When the app starts, Flutter needs a way to ask the native platform which flavor it has been started with. To communicate with native code, Flutter uses method channels. Go to android/app/src/main/kotlin/com.example.flutter_flavors and replace everything except the first line (the package import) with the following code. This will set up the method channel that returns the BuildConfig.FLAVOR value, which is a built-in value of Android. import androidx.annotation.NonNull; import io.flutter.embedding.android.FlutterActivity import io.flutter.embedding.engine.FlutterEngine import io.flutter.plugin.common.MethodChannel import io.flutter.plugins.GeneratedPluginRegistrant class MainActivity: FlutterActivity() { override fun configureFlutterEngine(@NonNull flutterEngine: FlutterEngine) { GeneratedPluginRegistrant.registerWith(flutterEngine); MethodChannel(flutterEngine.dartExecutor.binaryMessenger, \"flavor\").setMethodCallHandler { call, result -\u003e result.success(BuildConfig.FLAVOR) } } } ","date":"2020-10-03","objectID":"/flutter-flavors/:4:1","tags":null,"title":"Using Flutter flavors to separate the DEV and LIVE environment","uri":"/flutter-flavors/"},{"categories":["Mobile Development"],"content":"Add the flavor-settings to the Android build config In Android, the native flavor-specific values are stored in android/app/src/build.gradle via the android.flavorDimensions and android.productFlavors keys. We’ll use these keys to set up the flavor-specific applicationId and the flavor-specific display name for the app. This is important because we want to be able to have both flavors of the app installed at the same time. The applicationId is the unique app id for each flavor in the Google Play store. Once deployed to Google Play, this can not be changed anymore! Therefore, add the following two things within the android { ... } section: android { // ... all existing things like `sourceSets`, ... flavorDimensions \"app\" productFlavors { dev { dimension \"app\" applicationId \"at.chwe.flutterflavors.dev\" resValue \"string\", \"app_name\", \"DEV Flutter Flavors\" } live { dimension \"app\" applicationId \"at.chwe.flutterflavors\" resValue \"string\", \"app_name\", \"Flutter Flavors\" } } } ","date":"2020-10-03","objectID":"/flutter-flavors/:4:2","tags":null,"title":"Using Flutter flavors to separate the DEV and LIVE environment","uri":"/flutter-flavors/"},{"categories":["Mobile Development"],"content":"Use the app_name in the AndroidManifest.xml The applicationId is a well-known key that will already be used when the app is launched with a given flavor. However, we’ll need to do some more work to get the app_name working: Open android/app/src/main/AndroidManifest.xml and replace the \u003capplication android:label=\"flutter_flavors\" /\u003e key with \u003capplication android:label=\"@string/app_name\" /\u003e. ","date":"2020-10-03","objectID":"/flutter-flavors/:4:3","tags":null,"title":"Using Flutter flavors to separate the DEV and LIVE environment","uri":"/flutter-flavors/"},{"categories":["Mobile Development"],"content":"Run the app again on Android As we’re now using new applicationIds, make sure the existing “flutter_flavors”-app is uninstalled from your device. Now, launch the app in Android Studio with the “dev” build configuration. Close the app in the device and check your application list, the app name will now display “DEV Flutter Flavors”! Stop the app in Android Studio, change the build configuration to “live” and launch the app again. You’ll now have both flavors of your app installed on your Android device! Our native Android configuration is now complete. See all changes from this step in the Git commit. ","date":"2020-10-03","objectID":"/flutter-flavors/:4:4","tags":null,"title":"Using Flutter flavors to separate the DEV and LIVE environment","uri":"/flutter-flavors/"},{"categories":["Mobile Development"],"content":"Get the flavor in our Flutter code As described in our requirements, we want to target different API endpoints per flavor so we need a way to get the current flavor in our Flutter code. We’ll first add a class called FlavorSettings in a new file called lib/flavor_settings.dart that will hold all of our flavor-specific settings that we only need in our Flutter code: /// Contains the hard-coded settings per flavor. class FlavorSettings { final String apiBaseUrl; // TODO Add any additional flavor-specific settings here. FlavorSettings.dev() : apiBaseUrl = 'https://dev.flutter-flavors.chwe.at'; FlavorSettings.live() : apiBaseUrl = 'https://flutter-flavors.chwe.at'; } Next, we’ll use this in main.dart, where we’ll read the flavor via our method channel from the native platform and we’ll create the corresponding FlavorSettings-object. We’ll also have to make our main-method async for that. When done, your main.dart should contain the following code before the class MyApp extends StatelessWidget { line: import 'package:flutter/material.dart'; import 'package:flutter/services.dart'; import 'flavor_settings.dart'; Future\u003cvoid\u003e main() async { // NOTE: This is required for accessing the method channel before runApp(). WidgetsFlutterBinding.ensureInitialized(); final settings = await _getFlavorSettings(); print('API URL ${settings.apiBaseUrl}'); runApp(MyApp()); } Future\u003cFlavorSettings\u003e _getFlavorSettings() async { String flavor = await const MethodChannel('flavor') .invokeMethod\u003cString\u003e('getFlavor'); print('STARTED WITH FLAVOR $flavor'); if (flavor == 'dev') { return FlavorSettings.dev(); } else if (flavor == 'live') { return FlavorSettings.live(); } else { throw Exception(\"Unknown flavor: $flavor\"); } } // ... class MyApp extends StatelessWidget { Run the app with dev build configuration and look at the console output. It will display the following statements: I/flutter ( 4458): STARTED WITH FLAVOR dev I/flutter ( 4458): API URL https://dev.flutter-flavors.chwe.at Switch to the live build configuration and run your app again. This time, the console will display the following statements: I/flutter ( 4615): STARTED WITH FLAVOR live I/flutter ( 4615): API URL https://flutter-flavors.chwe.at That’s it! We can now access the current flavor from within Flutter and we can have flavor-specific settings. You can pass the FlavorSettings-instance down to your widgets manually, or you can use e.g. the provider-package to access it via dependency injection in your widgets. See all changes from this step in the Git commit. ","date":"2020-10-03","objectID":"/flutter-flavors/:5:0","tags":null,"title":"Using Flutter flavors to separate the DEV and LIVE environment","uri":"/flutter-flavors/"},{"categories":["Mobile Development"],"content":"Set up flavors for iOS Unfortunately, setting up flavors in iOS is more complex and we’ll have to use XCode and its UI for most of the steps. Let’s try building our app with a flavor for iOS now to see, what kind of error we get: flutter build ios --flavor dev The Xcode project does not define custom schemes. You cannot use the --flavor option. This means, that on iOS we have to rely on a feature called “custom schemes” to represent our flutter flavors. Setting them up requires multiple steps. ","date":"2020-10-03","objectID":"/flutter-flavors/:6:0","tags":null,"title":"Using Flutter flavors to separate the DEV and LIVE environment","uri":"/flutter-flavors/"},{"categories":["Mobile Development"],"content":"Create custom build configurations for the flavors Let’s open our ios-folder in XCode and start by creating our custom build configurations: Make sure the root “Runner” node is selected in XCode In the main window, select the “Runner” node below “PROJECT” (NOT below TARGETS) Select the “Info” tab In the “Configurations” section, do the following: Rename “Debug” to “Debug-dev” Rename “Release” to “Release-dev” Rename “Profile” to “Profile-dev” Duplicate “Debug-dev” and rename it to “Debug-live” Duplicate “Release-dev” and rename it to “Release-live” Duplicate “Profile-dev” and rename it to “Profile-live” This means, for every flavor, we need a separate “Debug”, “Release” \u0026 “Profile” configuration. ","date":"2020-10-03","objectID":"/flutter-flavors/:6:1","tags":null,"title":"Using Flutter flavors to separate the DEV and LIVE environment","uri":"/flutter-flavors/"},{"categories":["Mobile Development"],"content":"Assign build configurations to custom schemes Now we can set up the actual “custom schemes” by doing the following: Make sure the root “Runner” node is selected in XCode Select “Product -\u003e Scheme -\u003e Manage Schemes…” in the main toolbar. To get the “dev” scheme: Select the “Runner” scheme, click on the settings-icon in the top left and select “Duplicate” Rename the scheme to “dev” Make sure “Shared” is selected Close the dialog To get the “live” scheme: Select the “Runner” scheme again, click on the settings-icon in the top left and select “Duplicate” Rename the scheme to “live” For each of the sections (“Run”, “Test”, “Profile”, “Analyze”, “Archive”) on the left, change the build configuration to the corresponding “-live” version. Make sure “Shared” is selected Close the dialog Back in the “schemes” list, you can now delete the existing “Runner” scheme. This should result in the list looking like this: ","date":"2020-10-03","objectID":"/flutter-flavors/:6:2","tags":null,"title":"Using Flutter flavors to separate the DEV and LIVE environment","uri":"/flutter-flavors/"},{"categories":["Mobile Development"],"content":"Adding the method channel for iOS Building the app now shoud succeed, however when you try to run it, it will fail with the following error: [VERBOSE-2:ui_dart_state.cc(177)] Unhandled Exception: MissingPluginException(No implementation found for method getFlavor on channel flavor) That’s because we haven’t yet implemented the method channel that Flutter uses to get the current flavor from the native platform. To add this, we need to add some code to the application()-function of the Runner/AppDelegate.swift-file in XCode. The finished file should look like this: import UIKit import Flutter @UIApplicationMain @objc class AppDelegate: FlutterAppDelegate { override func application( _ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]? ) -\u003e Bool { GeneratedPluginRegistrant.register(with: self) let controller = window.rootViewController as! FlutterViewController let flavorChannel = FlutterMethodChannel( name: \"flavor\", binaryMessenger: controller.binaryMessenger) flavorChannel.setMethodCallHandler({(call: FlutterMethodCall, result: @escaping FlutterResult) -\u003e Void in // Note: this method is invoked on the UI thread let flavor = Bundle.main.infoDictionary?[\"App - Flavor\"] result(flavor) }) return super.application(application, didFinishLaunchingWithOptions: launchOptions) } } This will set up a method channel handler that reads the current flavor from a Bundle.main.infoDictionary with a key called App - Flavor. ","date":"2020-10-03","objectID":"/flutter-flavors/:6:3","tags":null,"title":"Using Flutter flavors to separate the DEV and LIVE environment","uri":"/flutter-flavors/"},{"categories":["Mobile Development"],"content":"Set up the flavor value per scheme The Bundle.main.infoDictionary from before refers to the Runner/Info.plist file and App - Flavor is a custom key that we have to add there manually next. So open the Runner/Info.plist file in XCode and and add a new row with the following settings: Key: App - Flavor Type: String Value $(APP_FLAVOR) We now have the key but we still don’t have the actual flavor-specific values per scheme. To add them, we now have to do the following: Select the root “Runner” node in your XCode project structure Select “Runner” below TARGETS Select the “Build settings” tab Click on the + to add a new User-defined setting Name it APP_FLAVOR Expand the node by clicking on the little arrow on the left of the row and add the actual flavor value to each build configuration: Debug-dev: dev Debug-live: live Profile-dev: dev Profile-live: live Release-dev: dev Release-live: live When done, it should look like this: ","date":"2020-10-03","objectID":"/flutter-flavors/:6:4","tags":null,"title":"Using Flutter flavors to separate the DEV and LIVE environment","uri":"/flutter-flavors/"},{"categories":["Mobile Development"],"content":"Run the iOS app We should now be able to select the “dev”-scheme in the top navigation bar of XCode and run the app. NOTE: If you get weird build errors from XCode, try switching between the dev/live schemes or try restarting XCode or running the iOS app from Android Studio. You should now see similar console output like for the Android app: 2020-10-03 14:44:05.525493+0200 Runner[26055:336596] flutter: STARTED WITH FLAVOR dev 2020-10-03 14:44:05.526672+0200 Runner[26055:336596] flutter: API URL https://dev.flutter-flavors.chwe.at See all changes from this step in the Git commit. Great, we now have set up our flavors for iOS as well! ","date":"2020-10-03","objectID":"/flutter-flavors/:6:5","tags":null,"title":"Using Flutter flavors to separate the DEV and LIVE environment","uri":"/flutter-flavors/"},{"categories":["Mobile Development"],"content":"Set the bundle id and app name per flavor for iOS You might have noticed that the app name on the iPhone still is “flutter_flavors”. Also, when you run both flavors, you still only have one app on your phone: Remember, that for Android we’ve set those values in the build.gradle file. To make things flavor-specific in iOS, we need to do something similar like we’ve done for the flavor value itself, where we’ve configured a key in Info.plist and then set different values in the “TARGETS/Runner -\u003e Build Settings” tab. ","date":"2020-10-03","objectID":"/flutter-flavors/:7:0","tags":null,"title":"Using Flutter flavors to separate the DEV and LIVE environment","uri":"/flutter-flavors/"},{"categories":["Mobile Development"],"content":"Set the flavor-specific bundle identifier The Info.plist file already contains a key named Bundle identifier that already contains a dynamic value $(PRODUCT_BUNDLE_IDENTIFIER), so we don’t have to create another entry in this file. Instead, we just have to modify this key in the the build settings: In XCode, select the root “Runner” node in the project explorer Select “Runner” below TARGETS Go to the “Build Settings” tab In the “Packaging” section, find the “Product Bundle Identifier” key Expand the key by clicking on the small arrow on the left Set the value per build configuration: Debug-dev: at.chwe.flutterflavors.dev Debug-live: at.chwe.flutterflavors Profile-dev: at.chwe.flutterflavors.dev Profile-live: at.chwe.flutterflavors Release-dev: at.chwe.flutterflavors.dev Release-live: at.chwe.flutterflavors ","date":"2020-10-03","objectID":"/flutter-flavors/:7:1","tags":null,"title":"Using Flutter flavors to separate the DEV and LIVE environment","uri":"/flutter-flavors/"},{"categories":["Mobile Development"],"content":"Set the app name To have separate display names per flavor, do the following: In XCode, select the root “Runner” node in the project explorer Select “Runner” below TARGETS Select the “Info” tab Change the value of the key Bundle name to $(APP_NAME). Go to the “Build Settings” tab Add a new User-Defined setting Name it APP_NAME Expand the APP_NAME-node by clicking on the small arrow on the left side of the node. Set the value per build configuration: Debug-dev: DEV Flutter Flavors Debug-live: Flutter Flavors Profile-dev: DEV Flutter Flavors Profile-live: Flutter Flavors Release-dev: DEV Flutter Flavors Release-live: Flutter Flavors ","date":"2020-10-03","objectID":"/flutter-flavors/:7:2","tags":null,"title":"Using Flutter flavors to separate the DEV and LIVE environment","uri":"/flutter-flavors/"},{"categories":["Mobile Development"],"content":"Run the app again with the dev and live flavors Delete the existing “flutter_flavors” app from your iPhone and run it again with each flavor. You should now have both apps with the correct name on your phone: See all changes from this step in the Git commit. ","date":"2020-10-03","objectID":"/flutter-flavors/:7:3","tags":null,"title":"Using Flutter flavors to separate the DEV and LIVE environment","uri":"/flutter-flavors/"},{"categories":["Mobile Development"],"content":"Add your own flavor-specific settings If you need another flavor-specific setting, you have to know if it is a platform-specific setting, that needs to be integrated directly into the android and ios folders or if it is a setting that is only required in your Flutter code. For platform-specific settings, the above guides for setting the app name and bundle id should help. For settings that you only need in your Flutter-code, just add them to the FlavorSettings-class that we’ve created above. ","date":"2020-10-03","objectID":"/flutter-flavors/:8:0","tags":null,"title":"Using Flutter flavors to separate the DEV and LIVE environment","uri":"/flutter-flavors/"},{"categories":["Mobile Development"],"content":"Summary We’ve now set up our Flutter project to have multiple flavors. We use those flavors to separate our app environments (DEV \u0026 LIVE). This way we don’t need to e.g. manually comment out code to switch our API URL or any other settings. We can also have both versions installed side by side, which makes development and support much easier as we can develop on the DEV version while we still can use the LIVE version which is deployed to the stores. ","date":"2020-10-03","objectID":"/flutter-flavors/:9:0","tags":null,"title":"Using Flutter flavors to separate the DEV and LIVE environment","uri":"/flutter-flavors/"},{"categories":[".NET"],"content":"In my last post, I showed you a C# script for finding projects which are not part of a SLN-file. Since having to compile it is a bit of an overhead, I decided to migrate this code to a powershell script, which you can find here: ProjectsMissingInSolution.ps1 ","date":"2015-09-30","objectID":"/find-missing-projects-with-powershell/:0:0","tags":null,"title":"Find missing projects with PowerShell","uri":"/find-missing-projects-with-powershell/"},{"categories":[".NET"],"content":"Do you use a Visual Studio solution which contains all of your projects to do daily builds? If you have lots of projects and if many people are involved it’s very likely that somebody forgets to add his project to this solution. This small program helps you by showing you all csproj-files that are not part of your solution file! class Program { static void Main(string[] args) { // Parameters string baseFolder = @\"C:\\path\\to\\solution\\\"; string slnFile = \"AllProjects.sln\"; string outputFile = \"MissingProjects.txt\"; string slnContent = File.ReadAllText(Path.Combine(baseFolder, slnFile)); string[] projectFiles = Directory.GetFiles(baseFolder, \"*.csproj\", SearchOption.AllDirectories); List\u003cstring\u003e missingProjects = projectFiles .Where(fullPath =\u003e slnContent.IndexOf(fullPath.Replace(baseFolder, \"\"), StringComparison.OrdinalIgnoreCase) \u003c 0) .ToList(); File.WriteAllLines(outputFile, missingProjects); Console.WriteLine(\"Projects missing in solution: \" + missingProjects.Count); Console.WriteLine(\"Details: \" + outputFile); Console.ReadLine(); } } ","date":"2014-08-21","objectID":"/find-projects-missing-in-visual-studio-solution/:0:0","tags":null,"title":"Find projects which are missing in your \"All Projects\" solution","uri":"/find-projects-missing-in-visual-studio-solution/"},{"categories":[".NET"],"content":"The first step in our process to a better folder structure for our MVC projects is to make sure, MVC can resolve our Controllers and Views. This is our target structure: (Project Root) Areas (AreaName) (FeatureName) (FeatureName)Controller.cs Index.cshtml Edit.cshtml … (other features) Shared … (area specific shared views like EditorTemplates, Layout-pages, …) … (other areas) Shared … (area independent shared views like EditorTemplates, Layout-pages, …) Features (Feature2Name) (Feature2Name)Controller.cs Index.cshtml Edit.cshtml … (other features) Shared … (feature independent shared views like EditorTemplates, Layout-pages, …) Of course, if you don’t want to use “areas” you only need the “Features” folder in your project. This also means, that if you move to this new structure, you can completely remove the old “Controllers” and “Views” folders. ","date":"2014-07-02","objectID":"/feature-folders-controllers-and-views/:0:0","tags":null,"title":"Feature Folders: Controllers and Views","uri":"/feature-folders-controllers-and-views/"},{"categories":[".NET"],"content":"Controllers To support this structure for Controllers, you don’t have to change anything in MVC since it does not force you to place them in a special folder! You can put Controllers into whatever folder you want. Resolving them is purely depended on your RouteConfig. ","date":"2014-07-02","objectID":"/feature-folders-controllers-and-views/:0:1","tags":null,"title":"Feature Folders: Controllers and Views","uri":"/feature-folders-controllers-and-views/"},{"categories":[".NET"],"content":"Views To support this structure for Views, you have to create a custom ViewEngine. As you can see in the following example, this can also be done very easily. Please note, that this code only supports *.cshtml-files. If you want to use *.vbhtml-files as well, you just have to duplicate the paths and change the extension to *.vbhtml. public class FeatureFolderViewEngine : RazorViewEngine { public FeatureFolderViewEngine() { // {0} ActionName // {1} ControllerName // {2} AreaName AreaViewLocationFormats = new[] { \"~/Areas/{2}/{1}/{0}.cshtml\", \"~/Areas/{2}/Shared/{0}.cshtml\", \"~/Areas/Shared/{0}.cshtml\", }; AreaMasterLocationFormats = new[] { \"~/Areas/{2}/{1}/{0}.cshtml\", \"~/Areas/{2}/Shared/{0}.cshtml\", \"~/Areas/Shared/{0}.cshtml\", }; AreaPartialViewLocationFormats = new[] { \"~/Areas/{2}/{1}/{0}.cshtml\", \"~/Areas/{2}/Shared/{0}.cshtml\", \"~/Areas/Shared/{0}.cshtml\", }; ViewLocationFormats = new[] { \"~/Features/{1}/{0}.cshtml\", \"~/Features/Shared/{0}.cshtml\", }; MasterLocationFormats = new[] { \"~/Features/{1}/{0}.cshtml\", \"~/Features/Shared/{0}.cshtml\", }; PartialViewLocationFormats = new[] { \"~/Features/{1}/{0}.cshtml\", \"~/Features/Shared/{0}.cshtml\", }; FileExtensions = new[] { \"cshtml\", }; } } Of course, if you use this new structure, you lose some of the built-in templating- and navigation-support in Visual Studio since VS does not recognize these folders as “Views”-folders. Therefore, the following things no longer work: “Go To View” throws an error. “Add View” adds the view to the old “Views”-folder. Fortunately, ReSharper helps you with these issues since it contains built-in templates for views and also supports our custom ViewEngine! ","date":"2014-07-02","objectID":"/feature-folders-controllers-and-views/:0:2","tags":null,"title":"Feature Folders: Controllers and Views","uri":"/feature-folders-controllers-and-views/"},{"categories":[".NET"],"content":"What’s the problem with the default ASP.NET MVC folder structure? Which of these requirements is more common? Change something in every view, controller or model of your project Add a new field to your model X, show this field to the user, make it editable, the value must be validated against some fancy rules, … I guess we are on the same page if we see the second one as more common. I would go as far as to say that if you have the first requirement you’re either working on a major relaunch or you’re not using layout pages, css, abstract classes, [insert random reusability gadget here] correctly. By default, the ASP.NET MVC project structure advices you to keep every concept in its own area – you therefore might end up with a structure like this: Content CustomerImages AnIconSpecialToCustomers.png Customers.css Controllers CustomersController.cs Models Customer.cs Repositories CustomerRepository.cs Scripts Customers.js Views Customers Create.cshtml Index.cshtml ViewModels Customers IndexViewModel.cs CreateViewModel.cs As soon as you have more than 3 controllers, this becomes hard to navigate. ASP.NET MVC’s solution for having a better structure is to use “Areas”, however in my opinion they do not solve the problem I’m talking about. To complete the second requirement I’ve mentioned, you still have to navigate through many folders, because most probably, you don’t have a distinct views-guy, a distinct model-guy, a distinct controller-guy, … in your company. It’s a lot more common that e.g. only one or two people are working on all of these mentioned files. ","date":"2014-04-07","objectID":"/introducing-the-asp.net-mvc-feature-folders-project-structure/:0:1","tags":null,"title":"Introducing the ASP.NET MVC “Feature Folders” Project Structure","uri":"/introducing-the-asp.net-mvc-feature-folders-project-structure/"},{"categories":[".NET"],"content":"Grouping files by feature When I’m talking about a feature, I understand it as a sum of files that are needed to create a user benefit. Therefore, with structuring files by feature, the project structure could look like this: Customers Images AnIconSpecialToCustomers.png Create.cshtml CreateViewModel.cs Customer.cs CustomerRepository.cs Customers.css Customers.js CustomersController.cs Index.cshtml IndexViewModel.cs Think again of our second requirement and of some of the advantages with this structure: You immediately get an overview about how the feature might be implemented. You immediately see which files might be affected by the requirement. You don’t have to check every concept folder to see if there even is a corresponding file. (there might not be a js-file for every feature, …) Every affected file is in one folder. The required navigation in the Solution Explorer is kept to a minimum. In your source control system, you can look at the entire change history of this feature on one folder. If you have to implement a new similar feature, you can copy this one folder and use it as a starting point. … ","date":"2014-04-07","objectID":"/introducing-the-asp.net-mvc-feature-folders-project-structure/:0:2","tags":null,"title":"Introducing the ASP.NET MVC “Feature Folders” Project Structure","uri":"/introducing-the-asp.net-mvc-feature-folders-project-structure/"},{"categories":[".NET"],"content":"Why is there a M in ASP.NET MVC? I would like to make an exception of my previous structure: It’s important to understand that the ASP.NET MVC framework itself (System.Web.Mvc) does NOT give you any built-in support for “models”. If you require persistent data, you are allowed to use whatever technology you want (Entity Framework, NHibernate, raw ADO.NET, …). Yes, the project templates by default already reference Entity Framework, but again, this is a separate library and ASP.NET MVC has no dependency on it. In my opinion this is a very good thing! The traditional three-tier architecture (data, business logic, presentation) still is one of the most important concepts for structuring software systems. ASP.NET MVC clearly targets the presentation tier and shouldn’t cover responsibilities from other tiers. For this reason, we have to move the files “Customer.cs” and “CustomerRepository.cs” into a separate library. However, everything else in our folder belongs to the presentation layer. ","date":"2014-04-07","objectID":"/introducing-the-asp.net-mvc-feature-folders-project-structure/:0:3","tags":null,"title":"Introducing the ASP.NET MVC “Feature Folders” Project Structure","uri":"/introducing-the-asp.net-mvc-feature-folders-project-structure/"},{"categories":[".NET"],"content":"What’s next? I plan to do follow-up posts that address the challenges and also possible solutions for this structure, so stay tuned! ","date":"2014-04-07","objectID":"/introducing-the-asp.net-mvc-feature-folders-project-structure/:0:4","tags":null,"title":"Introducing the ASP.NET MVC “Feature Folders” Project Structure","uri":"/introducing-the-asp.net-mvc-feature-folders-project-structure/"},{"categories":null,"content":"I thought, after 5 years since my last post it might be time to write a new one! But that’s not so easy! When you login to the backend after such a long time, everything feels just wrong: The design is ugly, the blog engine is outdated, I’m not sure if my hosting provider still is the best choice for me and I don’t like my domain anymore! So, instead of just writing a post about something, I decided to change all of these things first and tell you about this process! ","date":"2014-03-29","objectID":"/moving-my-blogengine.net-blog-to-microsoft-azure/:0:0","tags":null,"title":"Moving my BlogEngine.NET blog to Microsoft Azure","uri":"/moving-my-blogengine.net-blog-to-microsoft-azure/"},{"categories":null,"content":"Get a running BlogEngine.NET instance within minutes I was always interested in Windows Azure Microsoft Azure but never really had the time to do something useful with it. Therefore I decided to take this opportunity and move my blog to it. I already had access to the Azure Management Portal, so I didn’t have to go through some registration process. Since I also wanted to update my blog to the latest version of BlogEngine.NET I decided to start with a new installation and migrate my data afterwards (moving data from 6 posts is not so hard :-) ). Luckily, with Azure’s Gallery, it’s extremely easy to setup an instance of BlogEngine.Net. I just followed these instructions: http://blogs.msdn.com/b/webdev/archive/2012/10/12/blogengine-net-and-windows-azure-web-sites.aspx After that, I just had to go through a quick export/import process to move my data from my old blog to the new one. I started with a “free” web site but quickly scaled it up to a “shared” one because I wanted the site to be running on my custom domain. ","date":"2014-03-29","objectID":"/moving-my-blogengine.net-blog-to-microsoft-azure/:0:1","tags":null,"title":"Moving my BlogEngine.NET blog to Microsoft Azure","uri":"/moving-my-blogengine.net-blog-to-microsoft-azure/"},{"categories":null,"content":"Deployment with Git and the App_Data folder The default template of BlogEngine.NET 2.9 is quite nice, however I wanted to make some minor changes. Sounds like a good opportunity to test another great feature of Microsoft Azure: Git deployment. According to this tutorial, I setup a Git repository for my web site within the Azure portal and cloned the repository to my notebook. Again, this was very straightforward and worked immediately. This also has the advantage that you now have a backup of your remote files on your home network. But there’s one important thing to take care of when you use Git deployment with BlogEngine.NET. BlogEngine.NET by default stores data in files within the App_Data folder. This is quite nice since you don’t have to pay for a SQL Server database! However, if you use Git deployment it overwrites this folder, since it’s now under source control. Therefore I added the “App_Data” folder to the .gitignore file. Unfortunately, the deployment still did overwrite changes. I guess this happened, because on the server, the App_Data folder was still a part of the git folder. To overcome this, I tried a different way: First, I copied my local App_Data folder to some backup directory on my notebook. Then I removed the .gitignore file and really deleted the App_Data folder from my local and remote repository (so if you do this as well, please note that you will have a downtime!). After that, I manually copied the App_Data folder back to Azure with FTP. As a last step, I re-created the .gitignore file with the App_Data-exclusion and also moved the App_Data folder back on my machine. As a result, the “App_Data” folder is no longer monitored by Git and will not be touched when Azure does a deployment. Of course, whenever you need a up-to-date version of your App_Data folder on your PC for development purposes, you have to manually download it from Azure. ","date":"2014-03-29","objectID":"/moving-my-blogengine.net-blog-to-microsoft-azure/:0:2","tags":null,"title":"Moving my BlogEngine.NET blog to Microsoft Azure","uri":"/moving-my-blogengine.net-blog-to-microsoft-azure/"},{"categories":null,"content":"Some warnings about this I’m pretty sure this is not the best way to handle this. As far as I know, you shouldn’t store user generated content on your server but instead use an Azure Storage account for it. Having user files on your server has several disadvantages: you can’t scale out your servers, you don’t have any replication or backups and so on. I’m not sure if the current deployment behavior, which does not touch untracked folders will stay that way forever. I wouldn’t be surprised if they do a real sync someday because actually, the git repository should be 100% consistent with the web folder. This means, I do not recommend this for anything else than completely uncritical things! If you want to do this, make sure you regularly backup your App_Data folder by e.g. doing a scheduled FTP download every day. For this blog, I’m fine with those risks for now but if I happen to need a storage account anyway or if I will blog more in the future I will definitely move the data to a storage account. ","date":"2014-03-29","objectID":"/moving-my-blogengine.net-blog-to-microsoft-azure/:0:3","tags":null,"title":"Moving my BlogEngine.NET blog to Microsoft Azure","uri":"/moving-my-blogengine.net-blog-to-microsoft-azure/"},{"categories":[".NET"],"content":"The months of waiting are over! ASP.Net MVC 1.0 has finally been released. Get it while it’s HOT!! http://www.microsoft.com/downloads/details.aspx?FamilyID=53289097-73ce-43bf-b6a6-35e00103cb4b\u0026displaylang=en ","date":"2009-03-18","objectID":"/asp.net-mvc-1.0-has-been-released/:0:0","tags":null,"title":"ASP.Net MVC 1.0 has been released!","uri":"/asp.net-mvc-1.0-has-been-released/"},{"categories":null,"content":"Hello everyone! Next week, I will attend the biggest German .NET conference BASTA! Spring 2009. Feel free to contact me, if you’d like to chat with me “offline” there! ","date":"2009-02-20","objectID":"/meet-me-at-basta-spring-2009/:0:0","tags":null,"title":"Meet me @ BASTA! Spring 2009","uri":"/meet-me-at-basta-spring-2009/"},{"categories":null,"content":"What’s next on my blog? I’m working on an ASP.Net MVC application right now and I plan to post about some of the techniques I’ve used, so expect to read from me after the conference! Thanks for reading, Christian Weiss ","date":"2009-02-20","objectID":"/meet-me-at-basta-spring-2009/:0:1","tags":null,"title":"Meet me @ BASTA! Spring 2009","uri":"/meet-me-at-basta-spring-2009/"},{"categories":[".NET"],"content":"All good things come in threes, so I’m writing another post about how to access cookie or sessions. I got inspired by a comment from Chris Marisic, who suggested to use a more testable way for this stuff! Previous posts about this topic: Don’t use Response.Cookies[string] to check if a cookie exists! Use wrappers to access your cookies, sessions, … ","date":"2009-01-28","objectID":"/testable-and-reusable-cookie-access-with-asp.net-mvc-rc/:0:0","tags":null,"title":"Testable and reusable cookie access with ASP.Net MVC RC","uri":"/testable-and-reusable-cookie-access-with-asp.net-mvc-rc/"},{"categories":[".NET"],"content":"Intro Using static wrapper properties is a quick and easy way, but you can’t unit test them because they access HttpContext.Current directly. This time I will show you, how you can build a fully unit testable and strongly typed way to access your cookies. As there has been Christmas time 2 days ago (ASP.Net MVC RC1 was released *g*) I’m using the latest MVC bits for my example! ","date":"2009-01-28","objectID":"/testable-and-reusable-cookie-access-with-asp.net-mvc-rc/:0:1","tags":null,"title":"Testable and reusable cookie access with ASP.Net MVC RC","uri":"/testable-and-reusable-cookie-access-with-asp.net-mvc-rc/"},{"categories":[".NET"],"content":"A Reusable Cookie Container The cookie container is responsible for getting values out of and into the cookie collections. It does not know which concrete values I’m using in my application! This is implemented in a different level, so you can use this class for all of your applications! In my implementation it’s possible to store “objects” in cookies. I’ve implemented it this way because I don’t want to convert all my DateTime, int, … cookies every time! But I also don’t want someone to save Lists or any other complex types, so my SetValue() method validates the type of the value and throws an exception, if it’s not a value type or nullable value type. That’s a little type checking, but I think it is worth it because cookies are set quite rarely! Here’s the interface: public interface ICookieContainer { bool Exists(string key); string GetValue(string key); T GetValue\u003cT\u003e(string key); void SetValue(string key, object value, DateTime expires); } I will just show the fundamental code here. If you want to see the whole implementation, please take a look at the code sample. (see bottom) As you can see below, I’ve used the abstracted versions of HttpRequest and HttpResponse, which you get, if you use ASP.Net MVC. That’s just one of thousand things I love about ASP.Net MVC. These classes can be used easily in unit tests. Notice that everything can be injected here. There’s no direct access to HttpContext.Current! public class CookieContainer : ICookieContainer { private readonly HttpRequestBase _request; private readonly HttpResponseBase _response; public CookieContainer(HttpRequestBase request, HttpResponseBase response) { // \"Check\" is a helper class, I've got from the \"Kigg\" project Check.IsNotNull(request, \"request\"); Check.IsNotNull(response, \"response\"); _request = request; _response = response; } public string GetValue(string key) { Check.IsNotEmpty(key, \"key\"); HttpCookie cookie = _request.Cookies[key]; return cookie != null ? cookie.Value : null; } public void SetValue(string key, object value, DateTime expires) { Check.IsNotEmpty(key, \"key\"); string strValue = CheckAndConvertValue(value); HttpCookie cookie = new HttpCookie(key, strValue) {Expires = expires}; _response.Cookies.Set(cookie); } // ... see code sample for full implementation } Here’s a sample unit tests that proves the testability of this code. I use Moq as my mocking framework. public static class Mocks { public static Mock\u0026lt;HttpRequestBase\u0026gt; HttpRequest() { var httpRequest = new Mock\u0026lt;HttpRequestBase\u0026gt;(); httpRequest.Setup(x =\u0026gt; x.Cookies).Returns(new HttpCookieCollection()); return httpRequest; } public static Mock\u0026lt;HttpResponseBase\u0026gt; HttpResponse() { var httpResponse = new Mock\u0026lt;HttpResponseBase\u0026gt;(); httpResponse.Setup(x =\u0026gt; x.Cookies).Returns(new HttpCookieCollection()); return httpResponse; } } // This method is from my CookieContainerTests class [TestMethod] public void SetValue_UpdatesExistingCookie() { // Arrange const string cookieName = \"myCookie\"; const string cookieValue = \"myValue\"; DateTime cookieExpires = new DateTime(2009, 1, 1, 0, 0, 0); var httpRequest = Mocks.HttpRequest(); var httpResponse = Mocks.HttpResponse(); var cookieContainer = new CookieContainer(httpRequest.Object, httpResponse.Object); httpResponse.Object.Cookies.Add(new HttpCookie(cookieName, \"oldValue\")); // Act _cookieContainer.SetValue(cookieName, cookieValue, cookieExpires); // Assert HttpCookie cookie = httpResponse.Object.Cookies[\"myCookie\"]; Assert.IsNotNull(cookie); Assert.AreEqual(cookie.Name, cookieName); Assert.AreEqual(cookie.Value, cookieValue); Assert.AreEqual(cookie.Expires, cookieExpires); } That’s it! Now you have a testable and reusable cookie container! ","date":"2009-01-28","objectID":"/testable-and-reusable-cookie-access-with-asp.net-mvc-rc/:0:2","tags":null,"title":"Testable and reusable cookie access with ASP.Net MVC RC","uri":"/testable-and-reusable-cookie-access-with-asp.net-mvc-rc/"},{"categories":[".NET"],"content":"How to use it in your application It’s really easy to integrate this into your app! Just create an interface that defines all your application-specific properties you want to save in cookies and a concrete implementation of this interface that interacts with the cookie container. public interface IAppCookies { string UserEmail { get; set; } DateTime? LastVisit { get; set; } } public class AppCookies : IAppCookies { private readonly ICookieContainer _cookieContainer; public AppCookies(ICookieContainer cookieContainer) { _cookieContainer = cookieContainer; } public string UserEmail { get { return _cookieContainer.GetValue(\"UserEmail\"); } set { _cookieContainer.SetValue(\"UserEmail\", value, DateTime.Now.AddDays(10)); } } public DateTime? LastVisit { get { return _cookieContainer.GetValue\u0026lt;DateTime?\u0026gt;(\"LastVisit\"); } set { _cookieContainer.SetValue(\"LastVisit\", value, DateTime.Now.AddDays(10)); } } } You can now inject this IAppCookies interface to your MVC Controller: public class HomeController : Controller { private readonly IAppCookies _cookies; public HomeController(IAppCookies cookies) { _cookies = cookies; } public ActionResult Index() { DateTime currentTime = DateTime.Now; IndexViewModel viewModel = new IndexViewModel { CurrentTime = currentTime, LastVisit = (_cookies.LastVisit ?? currentTime), UserEmail = _cookies.UserEmail }; _cookies.LastVisit = currentTime; return View(viewModel); } public class IndexViewModel { public string UserEmail { get; set; } public DateTime LastVisit { get; set; } public DateTime CurrentTime { get; set; } } } Wow, you’re still reading :-) That’s all I want to show here! If you want to see more about how the IOC is set up (I’m using StructureMap) or anything else, take a look at the full code: Download full code sample I look forward to hearing your feedback on this! Thanks for reading, Christian Weiss ","date":"2009-01-28","objectID":"/testable-and-reusable-cookie-access-with-asp.net-mvc-rc/:0:3","tags":null,"title":"Testable and reusable cookie access with ASP.Net MVC RC","uri":"/testable-and-reusable-cookie-access-with-asp.net-mvc-rc/"},{"categories":[".NET"],"content":"As described in my previous post, I will give you some more details about how you can access your cookies in a type-safe and easy way! ","date":"2009-01-26","objectID":"/use-wrappers-to-access-your-cookies-sessions/:0:0","tags":null,"title":"Use wrappers to access your cookies, sessions, ...","uri":"/use-wrappers-to-access-your-cookies-sessions/"},{"categories":[".NET"],"content":"Update: Read the follow up post Testable and reusable cookie access with ASP.Net MVC RC The simplest way to do this is by using a little wrapper class like this one: using System; using System.Globalization; using System.Web; namespace CookieWrapper.Web { public static class MyCookies { public static string UserEmail { get { return GetValue(\"UserEmail\"); } set { SetValue(\"UserEmail\", value, DateTime.Now.AddDays(10)); } } public static DateTime? LastVisit { get { string strDate = GetValue(\"LastVisit\"); if (String.IsNullOrEmpty(strDate)) return null; return DateTime.Parse(strDate, CultureInfo.InvariantCulture); } set { string strDate = value.HasValue ? value.Value.ToString(CultureInfo.InvariantCulture) : null; SetValue(\"LastVisit\", strDate, DateTime.Now.AddDays(10)); } } private static string GetValue(string key) { HttpCookie cookie = HttpContext.Current.Request.Cookies[key]; if (cookie != null) return cookie.Value; return null; } private static void SetValue(string key, string value, DateTime expires) { HttpContext.Current.Response.Cookies[key].Value = value; HttpContext.Current.Response.Cookies[key].Expires = expires; } } } All you have to do is create a static property for every cookie that you would like to work with. As you can see you also have the Expires-times administrated in one single place! Now you can access the values as seen below and you don’t have to worry about the cookie implementation-details in every place. tbLastVisit.Text = MyCookies.UserEmail; MyCookies.LastVisit = DateTime.Now; Of course, you can also use this same approach for working with session data or any other key-based collection. Thanks for reading, Christian Weiss ","date":"2009-01-26","objectID":"/use-wrappers-to-access-your-cookies-sessions/:0:1","tags":null,"title":"Use wrappers to access your cookies, sessions, ...","uri":"/use-wrappers-to-access-your-cookies-sessions/"},{"categories":[".NET"],"content":"Update: Follow Up Posts Use wrappers to access your cookies, sessions, … Testable and reusable cookie access with ASP.Net MVC RC ","date":"2009-01-26","objectID":"/don-t-use-response.cookies-string--to-check-if-a-cookie-exists/:0:1","tags":null,"title":"Don't use Response.Cookies[string] to check if a cookie exists!","uri":"/don-t-use-response.cookies-string--to-check-if-a-cookie-exists/"},{"categories":[".NET"],"content":"The short explanation, if you don’t like to read the entire story If you use code like if (Response.Cookies[\"mycookie\"] != null) { … }, ASP.Net automatically generates a new cookie with the name “mycookie” in the background and overwrites your old cookie! Always use the Request.Cookies-Collection to read cookies! ","date":"2009-01-26","objectID":"/don-t-use-response.cookies-string--to-check-if-a-cookie-exists/:0:2","tags":null,"title":"Don't use Response.Cookies[string] to check if a cookie exists!","uri":"/don-t-use-response.cookies-string--to-check-if-a-cookie-exists/"},{"categories":[".NET"],"content":"The long explanation and some useful advices at the end You can access the Cookies-Collection in two different places in ASP.Net: Request.Cookies gives you the cookies that are sent from the browser to your server. With Response.Cookies, you can send cookies from your server to the browser. ","date":"2009-01-26","objectID":"/don-t-use-response.cookies-string--to-check-if-a-cookie-exists/:0:3","tags":null,"title":"Don't use Response.Cookies[string] to check if a cookie exists!","uri":"/don-t-use-response.cookies-string--to-check-if-a-cookie-exists/"},{"categories":[".NET"],"content":"Storing cookies To make your life easier (or harder, as you will see later), ASP.Net gives you the possibility to add a cookie to the browser this way: Response.Cookies[\"mycookie\"].Value = \"some value\"; Response.Cookies[\"mycookie\"].Expires = DateTime.Now.AddDays(10); As you can see here, the .NET framework automatically generates the HttpCookie instance with the name “mycookie” in the background and adds it to the collection. Sending cookies to the browser this way is perfectly fine. ","date":"2009-01-26","objectID":"/don-t-use-response.cookies-string--to-check-if-a-cookie-exists/:0:4","tags":null,"title":"Don't use Response.Cookies[string] to check if a cookie exists!","uri":"/don-t-use-response.cookies-string--to-check-if-a-cookie-exists/"},{"categories":[".NET"],"content":"Reading Cookies The important thing you have to know when reading cookies is, that the Response.Cookies collection is empty at the beginning of every request. The cookie with the name “mycookie” can only be found in the Request.Cookies-Collection! If you use the following line to check the cookie, a new cookie with the name “mycookie” and an empty value gets added to the Response.Cookies Collection and this overwrites your old cookie! (See framework code above!) if (Response.Cookies[\"mycookie\"] != null) { // This automatically overwrites the existing cookie with an empty value!!! } The correct way to access cookies is by using the Request.Cookies-Collection: if (Request.Cookies[\"mycookie\"] != null) { // This is fine } ","date":"2009-01-26","objectID":"/don-t-use-response.cookies-string--to-check-if-a-cookie-exists/:0:5","tags":null,"title":"Don't use Response.Cookies[string] to check if a cookie exists!","uri":"/don-t-use-response.cookies-string--to-check-if-a-cookie-exists/"},{"categories":[".NET"],"content":"So remember the following rules To read cookies, ALWAYS use the Request.Cookies-Collection Only use the Response.Cookies-Collection to set or change cookies ","date":"2009-01-26","objectID":"/don-t-use-response.cookies-string--to-check-if-a-cookie-exists/:0:6","tags":null,"title":"Don't use Response.Cookies[string] to check if a cookie exists!","uri":"/don-t-use-response.cookies-string--to-check-if-a-cookie-exists/"},{"categories":[".NET"],"content":"How can I make it better and more beautiful? Accessing the Request.Cookies or Response.Cookies collection directly is lame! You can’t easily test this code and you don’t have all the other cool stuff like type safety and IntelliSense for the keys. I will write a follow-up post right after this one with an detailed example on how you can do it better! Thanks for reading, Christian Weiss ","date":"2009-01-26","objectID":"/don-t-use-response.cookies-string--to-check-if-a-cookie-exists/:0:7","tags":null,"title":"Don't use Response.Cookies[string] to check if a cookie exists!","uri":"/don-t-use-response.cookies-string--to-check-if-a-cookie-exists/"},{"categories":null,"content":"I don’t know why, but due to some reasons, you stumbled upon this page! I’m happy to announce, that this page is going to be my attempt to make the world a better place for you – at least if you are a Microsoft .Net developer and if you – like me – love to learn new things! ","date":"2009-01-26","objectID":"/i-d-like-to-announce-myself/:0:0","tags":null,"title":"I'd like to announce ... myself!","uri":"/i-d-like-to-announce-myself/"},{"categories":null,"content":"“WTF? Yet another blog about programming?” If that’s what you are thinking right now, then my answer is “Maybe! But hopefully not!”. I will give my best to provide you with high quality information and if it saves you some hours then it served its purpose! ","date":"2009-01-26","objectID":"/i-d-like-to-announce-myself/:0:1","tags":null,"title":"I'd like to announce ... myself!","uri":"/i-d-like-to-announce-myself/"},{"categories":null,"content":"What can you expect from this blog? I’m a web developer and software architect. The things I like working with are constantly changing, as I really like to dive into new technologies! Currently I’m learning a lot about ASP.Net MVC and all the ALT.Net topics, so these will be the first topics I’m going to write about. ","date":"2009-01-26","objectID":"/i-d-like-to-announce-myself/:0:2","tags":null,"title":"I'd like to announce ... myself!","uri":"/i-d-like-to-announce-myself/"},{"categories":null,"content":"Your English is crap! Stop hurting my eyes! I’m from Austria and I speak German (with some crazy dialect)! That means, English is not my first language! This blog is a great opportunity for me to get my hands dirty and just improve my English knowledge! Please feel free to write comments and correct me, if you have found some disastrous mistakes. ","date":"2009-01-26","objectID":"/i-d-like-to-announce-myself/:0:3","tags":null,"title":"I'd like to announce ... myself!","uri":"/i-d-like-to-announce-myself/"},{"categories":null,"content":"Stop talking, start writing! That’s enough said for my first post! Hopefully, I’ve awaken your interest a little bit and you will visit my page again. Expect to reading from me soon! Thanks for reading, Christian Weiss ","date":"2009-01-26","objectID":"/i-d-like-to-announce-myself/:0:4","tags":null,"title":"I'd like to announce ... myself!","uri":"/i-d-like-to-announce-myself/"}]